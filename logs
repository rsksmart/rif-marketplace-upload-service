[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_stakes`;
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_stakes`;
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_stakes` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `total` VARCHAR(255),
  `currencyId` INTEGER,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_stakes`)
[DEBUG] 03/09 12:01:40 (db): Executing SQL (b138caab-594f-4afd-aead-36b46346af86):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 03/09 12:01:40 (db): Executing SQL (b138caab-594f-4afd-aead-36b46346af86):
SELECT
  `Offer`.`provider`,
  `Offer`.`totalCapacity`,
  `Offer`.`peerId`,
  `Offer`.`createdAt`,
  `Offer`.`updatedAt`,
  `plans`.`id` AS `plans.id`,
  `plans`.`period` AS `plans.period`,
  `plans`.`price` AS `plans.price`,
  `plans`.`offerId` AS `plans.offerId`,
  `plans`.`createdAt` AS `plans.createdAt`,
  `plans`.`updatedAt` AS `plans.updatedAt`
FROM
  `storage_offer` AS `Offer`
  LEFT OUTER JOIN `storage_billing-plan` AS `plans` ON `Offer`.`provider` = `plans`.`offerId`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 03/09 12:01:40 (db): Executing SQL (b138caab-594f-4afd-aead-36b46346af86):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 03/09 12:01:40 (db): Executing SQL (b138caab-594f-4afd-aead-36b46346af86):
COMMIT;
[INFO] 03/09 12:01:40 (storage:handler:offer): Created new StorageOffer for TestAddress
[DEBUG] 03/09 12:01:40 (db): Executing SQL (default):
SELECT
  `provider`,
  `totalCapacity`,
  `peerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_offer` AS `Offer`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 03/09 12:07:23 (db): Executing SQL (default):
SELECT
  `provider`,
  `totalCapacity`,
  `peerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_offer` AS `Offer`
WHERE
  cast(totalCapacity as integer) > 12301;
[DEBUG] 03/09 12:08:18 (db): Executing SQL (default):
SELECT
  `provider`,
  `totalCapacity`,
  `peerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_offer` AS `Offer`
WHERE
  `Offer`.`totalCapacity` > 12301;
[DEBUG] 03/09 12:10:04 (db): Executing SQL (default):
SELECT
  `provider`,
  `totalCapacity`,
  `peerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_offer` AS `Offer`
WHERE
  `Offer`.`totalCapacity` < 12025;
[DEBUG] 03/09 12:10:52 (db): Executing SQL (default):
SELECT
  `provider`,
  `totalCapacity`,
  `peerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_offer` AS `Offer`
WHERE
  `Offer`.`totalCapacity` < 1025;
[DEBUG] 03/09 12:11:20 (db): Executing SQL (default):
SELECT
  `provider`,
  `totalCapacity`,
  `peerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_offer` AS `Offer`
WHERE
  cast(totalCapacity as integer) < 1025;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `targetConfirmation`,
    `contractAddress`,
    `event`,
    `content`,
    `emitted`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (
    NULL,
    7,
    '1',
    3,
    '0x123',
    'testEvent',
    '{"event": "testEvent", "blockNumber": 7, "blockHash": "0x123"}',
    1,
    '2020-09-04 09:32:20.266 +00:00',
    '2020-09-04 09:32:20.266 +00:00'
  ),(
    NULL,
    8,
    '2',
    4,
    '0x123',
    'testEvent',
    '{"event": "testEvent", "blockNumber": 8, "blockHash": "0x123"}',
    0,
    '2020-09-04 09:32:20.266 +00:00',
    '2020-09-04 09:32:20.266 +00:00'
  ),(
    NULL,
    9,
    '3',
    2,
    '0x123',
    'niceEvent',
    '{"event": "niceEvent", "blockNumber": 9, "blockHash": "0x123"}',
    0,
    '2020-09-04 09:32:20.266 +00:00',
    '2020-09-04 09:32:20.266 +00:00'
  ),(
    NULL,
    9,
    '3',
    2,
    '0x123',
    'otherEvent',
    '{"event": "otherEvent", "blockNumber": 9, "blockHash": "0x123"}',
    0,
    '2020-09-04 09:32:20.266 +00:00',
    '2020-09-04 09:32:20.266 +00:00'
  ),(
    NULL,
    9,
    '4',
    2,
    '0x123',
    'completelyDifferentEvent',
    '{"event": "completelyDifferentEvent", "blockNumber": 9, "blockHash": "0x123"}',
    1,
    '2020-09-04 09:32:20.266 +00:00',
    '2020-09-04 09:32:20.266 +00:00'
  );
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
SELECT
  `id`,
  `blockNumber`,
  `transactionHash`,
  `logIndex`,
  `targetConfirmation`,
  `contractAddress`,
  `event`,
  `content`,
  `emitted`,
  `createdAt`,
  `updatedAt`
FROM
  `event` AS `Event`
WHERE
  `Event`.`contractAddress` = '0x123'
  AND `Event`.`emitted` = 0;
[DEBUG] 04/09 12:32:20 (blockchain:confirmator): Confirming event
{ event: 'niceEvent', blockNumber: 9, blockHash: '0x123' }
[DEBUG] 04/09 12:32:20 (blockchain:confirmator): Confirming event
{ event: 'otherEvent', blockNumber: 9, blockHash: '0x123' }
[INFO] 04/09 12:32:20 (blockchain:confirmator): Confirmed 2 events.
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
UPDATE
  `event`
SET
  `emitted` = $ 1,
  `updatedAt` = $ 2
WHERE
  `id` IN (3, 4)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DELETE FROM
  `event`
WHERE
  `emitted` = 1
  AND `contractAddress` = '0x123'
  AND `blockNumber` <= 1 - `targetConfirmation`
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
SELECT
  count(*) AS `count`
FROM
  `event` AS `Event`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `targetConfirmation`,
    `contractAddress`,
    `event`,
    `content`,
    `emitted`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (
    NULL,
    9,
    '3',
    2,
    '0x123',
    'niceEvent',
    '{"event": "niceEvent", "blockNumber": 9, "blockHash": "0x123"}',
    0,
    '2020-09-04 09:32:20.414 +00:00',
    '2020-09-04 09:32:20.414 +00:00'
  ),(
    NULL,
    8,
    '2',
    2,
    '0x123',
    'otherEvent',
    '{"event": "otherEvent", "blockNumber": 8, "blockHash": "0x123"}',
    0,
    '2020-09-04 09:32:20.414 +00:00',
    '2020-09-04 09:32:20.414 +00:00'
  );
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
SELECT
  `id`,
  `blockNumber`,
  `transactionHash`,
  `logIndex`,
  `targetConfirmation`,
  `contractAddress`,
  `event`,
  `content`,
  `emitted`,
  `createdAt`,
  `updatedAt`
FROM
  `event` AS `Event`
WHERE
  `Event`.`contractAddress` = '0x123'
  AND `Event`.`emitted` = 0;
[DEBUG] 04/09 12:32:20 (blockchain:confirmator): Confirming event
{ event: 'niceEvent', blockNumber: 9, blockHash: '0x123' }
[DEBUG] 04/09 12:32:20 (blockchain:confirmator): Confirming event
{ event: 'otherEvent', blockNumber: 8, blockHash: '0x123' }
[INFO] 04/09 12:32:20 (blockchain:confirmator): Confirmed 2 events.
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
UPDATE
  `event`
SET
  `emitted` = $ 1,
  `updatedAt` = $ 2
WHERE
  `id` IN (1, 2)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DELETE FROM
  `event`
WHERE
  `emitted` = 1
  AND `contractAddress` = '0x123'
  AND `blockNumber` <= 3 - `targetConfirmation`
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
SELECT
  count(*) AS `count`
FROM
  `event` AS `Event`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `targetConfirmation`,
    `contractAddress`,
    `event`,
    `content`,
    `emitted`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (
    NULL,
    8,
    '2',
    4,
    '0x0',
    'testEvent',
    '{"event": "testEvent", "blockNumber": 8, "blockHash": "0x123"}',
    0,
    '2020-09-04 09:32:20.500 +00:00',
    '2020-09-04 09:32:20.500 +00:00'
  ),(
    NULL,
    8,
    '2',
    4,
    '0x123',
    'testEvent',
    '{"event": "testEvent", "blockNumber": 8, "blockHash": "0x123"}',
    0,
    '2020-09-04 09:32:20.500 +00:00',
    '2020-09-04 09:32:20.500 +00:00'
  ),(
    NULL,
    9,
    '3',
    2,
    '0x123',
    'niceEvent',
    '{"event": "niceEvent", "blockNumber": 9, "blockHash": "0x123"}',
    0,
    '2020-09-04 09:32:20.500 +00:00',
    '2020-09-04 09:32:20.500 +00:00'
  ),(
    NULL,
    9,
    '3',
    2,
    '0x0',
    'otherEvent',
    '{"event": "otherEvent", "blockNumber": 9, "blockHash": "0x123"}',
    0,
    '2020-09-04 09:32:20.500 +00:00',
    '2020-09-04 09:32:20.500 +00:00'
  ),(
    NULL,
    9,
    '4',
    2,
    '0x123',
    'completelyDifferentEvent',
    '{"event": "completelyDifferentEvent", "blockNumber": 9, "blockHash": "0x123"}',
    1,
    '2020-09-04 09:32:20.500 +00:00',
    '2020-09-04 09:32:20.500 +00:00'
  );
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
SELECT
  `id`,
  `blockNumber`,
  `transactionHash`,
  `logIndex`,
  `targetConfirmation`,
  `contractAddress`,
  `event`,
  `content`,
  `emitted`,
  `createdAt`,
  `updatedAt`
FROM
  `event` AS `Event`
WHERE
  `Event`.`contractAddress` = '0x123'
  AND `Event`.`emitted` = 0;
[DEBUG] 04/09 12:32:20 (blockchain:confirmator): Confirming event
{ event: 'niceEvent', blockNumber: 9, blockHash: '0x123' }
[INFO] 04/09 12:32:20 (blockchain:confirmator): Confirmed 1 events.
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
UPDATE
  `event`
SET
  `emitted` = $ 1,
  `updatedAt` = $ 2
WHERE
  `id` IN (3)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DELETE FROM
  `event`
WHERE
  `emitted` = 1
  AND `contractAddress` = '0x123'
  AND `blockNumber` <= 1 - `targetConfirmation`
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
SELECT
  count(*) AS `count`
FROM
  `event` AS `Event`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `targetConfirmation`,
    `contractAddress`,
    `event`,
    `emitted`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (
    NULL,
    7,
    '1',
    3,
    '0x123',
    'testEvent',
    1,
    '2020-09-04 09:32:20.583 +00:00',
    '2020-09-04 09:32:20.583 +00:00'
  ),(
    NULL,
    15,
    '3',
    3,
    '0x123',
    'niceEvent',
    1,
    '2020-09-04 09:32:20.583 +00:00',
    '2020-09-04 09:32:20.583 +00:00'
  ),(
    NULL,
    16,
    '3',
    3,
    '0x123',
    'otherEvent',
    1,
    '2020-09-04 09:32:20.583 +00:00',
    '2020-09-04 09:32:20.583 +00:00'
  ),(
    NULL,
    15,
    '4',
    4,
    '0x123',
    'completelyDifferentEvent',
    1,
    '2020-09-04 09:32:20.583 +00:00',
    '2020-09-04 09:32:20.583 +00:00'
  );
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
SELECT
  `id`,
  `blockNumber`,
  `transactionHash`,
  `logIndex`,
  `targetConfirmation`,
  `contractAddress`,
  `event`,
  `content`,
  `emitted`,
  `createdAt`,
  `updatedAt`
FROM
  `event` AS `Event`
WHERE
  `Event`.`contractAddress` = '0x123'
  AND `Event`.`emitted` = 0;
[INFO] 04/09 12:32:20 (blockchain:confirmator): Confirmed 0 events.
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
UPDATE
  `event`
SET
  `emitted` = $ 1,
  `updatedAt` = $ 2
WHERE
  `id` IN (NULL)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DELETE FROM
  `event`
WHERE
  `emitted` = 1
  AND `contractAddress` = '0x123'
  AND `blockNumber` <= 18 - `targetConfirmation`
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
SELECT
  count(*) AS `count`
FROM
  `event` AS `Event`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
SELECT
  `id`,
  `blockNumber`,
  `transactionHash`,
  `logIndex`,
  `targetConfirmation`,
  `contractAddress`,
  `event`,
  `content`,
  `emitted`,
  `createdAt`,
  `updatedAt`
FROM
  `event` AS `Event`
WHERE
  `Event`.`event` = 'testEvent'
  AND `Event`.`blockNumber` = 7
  AND `Event`.`transactionHash` = '1'
LIMIT
  1;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
SELECT
  `id`,
  `blockNumber`,
  `transactionHash`,
  `logIndex`,
  `targetConfirmation`,
  `contractAddress`,
  `event`,
  `content`,
  `emitted`,
  `createdAt`,
  `updatedAt`
FROM
  `event` AS `Event`
WHERE
  `Event`.`event` = 'niceEvent'
  AND `Event`.`blockNumber` = 15
  AND `Event`.`transactionHash` = '3'
LIMIT
  1;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
SELECT
  `id`,
  `blockNumber`,
  `transactionHash`,
  `logIndex`,
  `targetConfirmation`,
  `contractAddress`,
  `event`,
  `content`,
  `emitted`,
  `createdAt`,
  `updatedAt`
FROM
  `event` AS `Event`
WHERE
  `Event`.`event` = 'otherEvent'
  AND `Event`.`blockNumber` = 16
  AND `Event`.`transactionHash` = '3'
LIMIT
  1;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
SELECT
  `id`,
  `blockNumber`,
  `transactionHash`,
  `logIndex`,
  `targetConfirmation`,
  `contractAddress`,
  `event`,
  `content`,
  `emitted`,
  `createdAt`,
  `updatedAt`
FROM
  `event` AS `Event`
WHERE
  `Event`.`event` = 'completelyDifferentEvent'
  AND `Event`.`blockNumber` = 15
  AND `Event`.`transactionHash` = '4'
LIMIT
  1;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `targetConfirmation`,
    `contractAddress`,
    `event`,
    `emitted`,
    `createdAt`,
    `updatedAt`,
    `content`
  )
VALUES
  (
    NULL,
    7,
    '1',
    3,
    '0x123',
    'testEvent',
    1,
    '2020-09-04 09:32:20.672 +00:00',
    '2020-09-04 09:32:20.672 +00:00',
    NULL
  ),(
    NULL,
    7,
    '2',
    3,
    '0x123',
    'testEvent',
    1,
    '2020-09-04 09:32:20.672 +00:00',
    '2020-09-04 09:32:20.672 +00:00',
    NULL
  ),(
    NULL,
    9,
    '3',
    2,
    '0x123',
    'niceEvent',
    0,
    '2020-09-04 09:32:20.672 +00:00',
    '2020-09-04 09:32:20.672 +00:00',
    NULL
  ),(
    NULL,
    9,
    '4',
    2,
    '0x123',
    'otherEvent',
    0,
    '2020-09-04 09:32:20.672 +00:00',
    '2020-09-04 09:32:20.672 +00:00',
    NULL
  ),(
    NULL,
    9,
    '5',
    2,
    '0x123',
    'completelyDifferentEvent',
    0,
    '2020-09-04 09:32:20.672 +00:00',
    '2020-09-04 09:32:20.672 +00:00',
    '{"event": "completelyDifferentEvent", "blockNumber": 9, "blockHash": "0x123"}'
  );
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
SELECT
  `id`,
  `blockNumber`,
  `transactionHash`,
  `logIndex`,
  `targetConfirmation`,
  `contractAddress`,
  `event`,
  `content`,
  `emitted`,
  `createdAt`,
  `updatedAt`
FROM
  `event` AS `Event`
WHERE
  `Event`.`contractAddress` = '0x123'
  AND `Event`.`emitted` = 0;
[WARN] 04/09 12:32:20 (blockchain:confirmator): Event niceEvent of transaction 3 does not have valid receipt!
      Block numbers: 9 (event) vs 10 (receipt) and receipt status: true 
[WARN] 04/09 12:32:20 (blockchain:confirmator): Event otherEvent of transaction 4 does not have valid receipt!
      Block numbers: 9 (event) vs 9 (receipt) and receipt status: false 
[DEBUG] 04/09 12:32:20 (blockchain:confirmator): Confirming event
{ event: 'completelyDifferentEvent',
  blockNumber: 9,
  blockHash: '0x123' }
[INFO] 04/09 12:32:20 (blockchain:confirmator): Confirmed 1 events.
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
UPDATE
  `event`
SET
  `emitted` = $ 1,
  `updatedAt` = $ 2
WHERE
  `id` IN (5)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DELETE FROM
  `event`
WHERE
  `id` IN (3, 4)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DELETE FROM
  `event`
WHERE
  `emitted` = 1
  AND `contractAddress` = '0x123'
  AND `blockNumber` <= 1 - `targetConfirmation`
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
SELECT
  count(*) AS `count`
FROM
  `event` AS `Event`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `targetConfirmation`,
    `contractAddress`,
    `event`,
    `content`,
    `emitted`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (
    NULL,
    7,
    '1',
    3,
    '0x666',
    'testEvent',
    '{"event": "testEvent", "blockNumber": 7, "blockHash": "0x123"}',
    1,
    '2020-09-04 09:32:20.757 +00:00',
    '2020-09-04 09:32:20.757 +00:00'
  ),(
    NULL,
    8,
    '2',
    4,
    '0x123',
    'testEvent',
    '{"event": "testEvent", "blockNumber": 8, "blockHash": "0x123"}',
    0,
    '2020-09-04 09:32:20.757 +00:00',
    '2020-09-04 09:32:20.757 +00:00'
  ),(
    NULL,
    9,
    '3',
    2,
    '0x123',
    'niceEvent',
    '{"event": "niceEvent", "blockNumber": 9, "blockHash": "0x123"}',
    0,
    '2020-09-04 09:32:20.757 +00:00',
    '2020-09-04 09:32:20.757 +00:00'
  ),(
    NULL,
    9,
    '4',
    2,
    '0x123',
    'otherEvent',
    '{"event": "otherEvent", "blockNumber": 9, "blockHash": "0x123"}',
    0,
    '2020-09-04 09:32:20.757 +00:00',
    '2020-09-04 09:32:20.757 +00:00'
  ),(
    NULL,
    9,
    '5',
    2,
    '0x123',
    'completelyDifferentEvent',
    '{"event": "completelyDifferentEvent", "blockNumber": 9, "blockHash": "0x123"}',
    1,
    '2020-09-04 09:32:20.757 +00:00',
    '2020-09-04 09:32:20.757 +00:00'
  );
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
SELECT
  `id`,
  `blockNumber`,
  `transactionHash`,
  `logIndex`,
  `targetConfirmation`,
  `contractAddress`,
  `event`,
  `content`,
  `emitted`,
  `createdAt`,
  `updatedAt`
FROM
  `event` AS `Event`
WHERE
  `Event`.`contractAddress` = '0x123';
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `targetConfirmation`,
    `event`,
    `emitted`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (
    NULL,
    7,
    '1',
    3,
    'testEvent',
    1,
    '2020-09-04 09:32:20.833 +00:00',
    '2020-09-04 09:32:20.833 +00:00'
  ),(
    NULL,
    8,
    '2',
    3,
    'testEvent',
    1,
    '2020-09-04 09:32:20.833 +00:00',
    '2020-09-04 09:32:20.833 +00:00'
  ),(
    NULL,
    9,
    '3',
    3,
    'niceEvent',
    0,
    '2020-09-04 09:32:20.833 +00:00',
    '2020-09-04 09:32:20.833 +00:00'
  ),(
    NULL,
    9,
    '3',
    2,
    'otherEvent',
    1,
    '2020-09-04 09:32:20.833 +00:00',
    '2020-09-04 09:32:20.833 +00:00'
  ),(
    NULL,
    10,
    '4',
    3,
    'otherEvent',
    0,
    '2020-09-04 09:32:20.833 +00:00',
    '2020-09-04 09:32:20.833 +00:00'
  );
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
SELECT
  `blockNumber`,
  `transactionHash`,
  `event`,
  `targetConfirmation`
FROM
  `event` AS `Event`
GROUP BY
  `transactionHash`,
  `event`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:20 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[INFO] 04/09 12:32:20 (blockchain:events:dummy): Listener attached, starting processing events.
[INFO] 04/09 12:32:20 (blockchain:events:dummy): => Processing past events from genesis to 11
[DEBUG] 04/09 12:32:21 (blockchain:events:dummy): Emitting event
[DEBUG] 04/09 12:32:21 (blockchain:events:dummy): Emitting event
[DEBUG] 04/09 12:32:21 (blockchain:events:dummy): Emitting event
[DEBUG] 04/09 12:32:21 (blockchain:events:dummy): Emitting event
[INFO] 04/09 12:32:21 (blockchain:events:dummy): => Finished processing past events in 0s
[DEBUG] 04/09 12:32:21 (blockchain:events:dummy): Emitting event
[DEBUG] 04/09 12:32:21 (blockchain:events:dummy): Emitting event
[DEBUG] 04/09 12:32:21 (blockchain:events:dummy): Emitting event
[DEBUG] 04/09 12:32:21 (blockchain:events:dummy): Emitting event
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[INFO] 04/09 12:32:21 (blockchain:events:dummy): Listener attached, starting processing events.
[INFO] 04/09 12:32:21 (blockchain:events:dummy): => Processing past events from genesis to 10
[VERBOSE] 04/09 12:32:21 (blockchain:events:dummy): Threshold block 8
[INFO] 04/09 12:32:21 (blockchain:events:dummy): 2 events to be confirmed.
[DEBUG] 04/09 12:32:21 (blockchain:events:dummy): New testEvent event to be confirmed. Transaction 3.1
[DEBUG] 04/09 12:32:21 (blockchain:events:dummy): New testEvent event to be confirmed. Transaction 4.1
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `logIndex`,
    `targetConfirmation`,
    `contractAddress`,
    `event`,
    `emitted`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (
    NULL,
    9,
    '3',
    1,
    2,
    '[Function: SubstituteJS] -> replace',
    'testEvent',
    0,
    '2020-09-04 09:32:21.175 +00:00',
    '2020-09-04 09:32:21.175 +00:00'
  ),(
    NULL,
    10,
    '4',
    1,
    2,
    '[Function: SubstituteJS] -> replace',
    'testEvent',
    0,
    '2020-09-04 09:32:21.175 +00:00',
    '2020-09-04 09:32:21.175 +00:00'
  );
[INFO] 04/09 12:32:21 (blockchain:events:dummy): 2 events to be emitted.
[DEBUG] 04/09 12:32:21 (blockchain:events:dummy): Emitting event
[DEBUG] 04/09 12:32:21 (blockchain:events:dummy): Emitting event
[INFO] 04/09 12:32:21 (blockchain:events:dummy): => Finished processing past events in 0s
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
SELECT
  count(*) AS `count`
FROM
  `event` AS `Event`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[INFO] 04/09 12:32:21 (blockchain:events:dummy): Listener attached, starting processing events.
[VERBOSE] 04/09 12:32:21 (blockchain:events:dummy): Threshold block 8
[INFO] 04/09 12:32:21 (blockchain:events:dummy): 2 events to be confirmed.
[DEBUG] 04/09 12:32:21 (blockchain:events:dummy): New testEvent event to be confirmed. Transaction 3.1
[DEBUG] 04/09 12:32:21 (blockchain:events:dummy): New testEvent event to be confirmed. Transaction 4.1
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `logIndex`,
    `targetConfirmation`,
    `contractAddress`,
    `event`,
    `emitted`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (
    NULL,
    9,
    '3',
    1,
    2,
    '[Function: SubstituteJS] -> replace',
    'testEvent',
    0,
    '2020-09-04 09:32:21.342 +00:00',
    '2020-09-04 09:32:21.342 +00:00'
  ),(
    NULL,
    10,
    '4',
    1,
    2,
    '[Function: SubstituteJS] -> replace',
    'testEvent',
    0,
    '2020-09-04 09:32:21.342 +00:00',
    '2020-09-04 09:32:21.342 +00:00'
  );
[INFO] 04/09 12:32:21 (blockchain:events:dummy): 2 events to be emitted.
[DEBUG] 04/09 12:32:21 (blockchain:events:dummy): Emitting event
[DEBUG] 04/09 12:32:21 (blockchain:events:dummy): Emitting event
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
SELECT
  count(*) AS `count`
FROM
  `event` AS `Event`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[INFO] 04/09 12:32:21 (blockchain:events:dummy): Listener attached, starting processing events.
[INFO] 04/09 12:32:21 (blockchain:events:dummy): => Processing past events from genesis to 10
[DEBUG] 04/09 12:32:21 (blockchain:events:dummy): Emitting event
[DEBUG] 04/09 12:32:21 (blockchain:events:dummy): Emitting event
[DEBUG] 04/09 12:32:21 (blockchain:events:dummy): Emitting event
[INFO] 04/09 12:32:21 (blockchain:events:dummy): => Finished processing past events in 0s
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[INFO] 04/09 12:32:21 (blockchain:events:dummy): Listener attached, starting processing events.
[DEBUG] 04/09 12:32:21 (blockchain:events:dummy): Emitting event
[DEBUG] 04/09 12:32:21 (blockchain:events:dummy): Emitting event
[DEBUG] 04/09 12:32:21 (blockchain:events:dummy): Emitting event
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:21 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[INFO] 04/09 12:32:21 (blockchain:events:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:32:21 (blockchain:events:polling): Received new block number 11
[INFO] 04/09 12:32:21 (blockchain:events:polling): Checking new events between blocks 10-[Function: SubstituteJS] -> number
[DEBUG] 04/09 12:32:21 (blockchain:events:polling): Received events: 
{ '0': [Function: SubstituteJS] -> number }
[DEBUG] 04/09 12:32:21 (blockchain:events:polling): Emitting event
[VERBOSE] 04/09 12:32:21 (blockchain:events:polling): Received new block number 12
[INFO] 04/09 12:32:21 (blockchain:events:polling): Checking new events between blocks 11-[Function: SubstituteJS] -> number
[DEBUG] 04/09 12:32:21 (blockchain:events:polling): Received events: 
{ '0': [Function: SubstituteJS] -> number }
[DEBUG] 04/09 12:32:21 (blockchain:events:polling): Emitting event
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[INFO] 04/09 12:32:22 (blockchain:events:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:32:22 (blockchain:events:polling): Received new block number 11
[INFO] 04/09 12:32:22 (blockchain:events:polling): Checking new events between blocks 10-[Function: SubstituteJS] -> number
[DEBUG] 04/09 12:32:22 (blockchain:events:polling): Received events: 
{ '0': [Function: SubstituteJS] -> number }
[DEBUG] 04/09 12:32:22 (blockchain:events:polling): Emitting event
[VERBOSE] 04/09 12:32:22 (blockchain:events:polling): Received new block number 12
[INFO] 04/09 12:32:22 (blockchain:events:polling): Checking new events between blocks 11-[Function: SubstituteJS] -> number
[DEBUG] 04/09 12:32:22 (blockchain:events:polling): Received events: 
[INFO] 04/09 12:32:22 (blockchain:events:polling): No events to be processed.
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[INFO] 04/09 12:32:22 (blockchain:events:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:32:22 (blockchain:events:polling): Received new block number 11
[INFO] 04/09 12:32:22 (blockchain:events:polling): Checking new events between blocks 10-[Function: SubstituteJS] -> number
[DEBUG] 04/09 12:32:22 (blockchain:events:polling): Received events: 
{ '0': [Function: SubstituteJS] -> number }
[DEBUG] 04/09 12:32:22 (blockchain:events:polling): Emitting event
[VERBOSE] 04/09 12:32:22 (blockchain:events:polling): Received new block number 11
[VERBOSE] 04/09 12:32:22 (blockchain:events:polling): Nothing new to process
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[INFO] 04/09 12:32:22 (blockchain:events:polling): Listener attached, starting processing events.
[INFO] 04/09 12:32:22 (blockchain:events:polling): => Processing past events from genesis to [Function: SubstituteJS] -> hash
[DEBUG] 04/09 12:32:22 (blockchain:events:polling): Emitting event
[DEBUG] 04/09 12:32:22 (blockchain:events:polling): Emitting event
[DEBUG] 04/09 12:32:22 (blockchain:events:polling): Emitting event
[DEBUG] 04/09 12:32:22 (blockchain:events:polling): Emitting event
[INFO] 04/09 12:32:22 (blockchain:events:polling): => Finished processing past events in 0s
[VERBOSE] 04/09 12:32:22 (blockchain:events:polling): Received new block number 11
[INFO] 04/09 12:32:22 (blockchain:events:polling): Checking new events between blocks [Function: SubstituteJS] -> number-[Function: SubstituteJS] -> number
[DEBUG] 04/09 12:32:22 (blockchain:events:polling): Received events: 
{ '0': [Function: SubstituteJS] -> number,
  '1': [Function: SubstituteJS] -> number,
  '2': [Function: SubstituteJS] -> number,
  '3': [Function: SubstituteJS] -> number }
[DEBUG] 04/09 12:32:22 (blockchain:events:polling): Emitting event
[DEBUG] 04/09 12:32:22 (blockchain:events:polling): Emitting event
[DEBUG] 04/09 12:32:22 (blockchain:events:polling): Emitting event
[DEBUG] 04/09 12:32:22 (blockchain:events:polling): Emitting event
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `targetConfirmation`,
    `contractAddress`,
    `event`,
    `content`,
    `emitted`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (
    NULL,
    7,
    '1',
    3,
    '0x123',
    'testEvent',
    '{"event": "testEvent", "blockNumber": 7, "blockHash": "0x123"}',
    1,
    '2020-09-04 09:32:23.246 +00:00',
    '2020-09-04 09:32:23.246 +00:00'
  ),(
    NULL,
    8,
    '2',
    4,
    '0x123',
    'testEvent',
    '{"event": "testEvent", "blockNumber": 8, "blockHash": "0x123"}',
    0,
    '2020-09-04 09:32:23.246 +00:00',
    '2020-09-04 09:32:23.246 +00:00'
  ),(
    NULL,
    9,
    '3',
    2,
    '0x666',
    'niceEvent',
    '{"event": "niceEvent", "blockNumber": 9, "blockHash": "0x123"}',
    0,
    '2020-09-04 09:32:23.246 +00:00',
    '2020-09-04 09:32:23.246 +00:00'
  );
[INFO] 04/09 12:32:23 (blockchain:events:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:32:23 (blockchain:events:polling): Received new block number 11
[WARN] 04/09 12:32:23 (blockchain:events:polling): Reorg happening! Old hash: 0x123; New hash: 0x321
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DELETE FROM
  `event`
WHERE
  `contractAddress` = '0x123'
[VERBOSE] 04/09 12:32:23 (blockchain:events:polling): Threshold block 10
[INFO] 04/09 12:32:23 (blockchain:events:polling): 1 events to be confirmed.
[DEBUG] 04/09 12:32:23 (blockchain:events:polling): New testEvent event to be confirmed. Transaction 1.1
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `logIndex`,
    `targetConfirmation`,
    `contractAddress`,
    `event`,
    `emitted`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (
    NULL,
    11,
    '1',
    1,
    1,
    '0x123',
    'testEvent',
    0,
    '2020-09-04 09:32:23.255 +00:00',
    '2020-09-04 09:32:23.255 +00:00'
  );
[INFO] 04/09 12:32:23 (blockchain:events:polling): 0 events to be emitted.
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
SELECT
  count(*) AS `count`
FROM
  `event` AS `Event`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[INFO] 04/09 12:32:23 (blockchain:events:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:32:23 (blockchain:events:polling): Received new block number 11
[WARN] 04/09 12:32:23 (blockchain:events:polling): Reorg happening! Old hash: 0x123; New hash: 0x321
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DELETE FROM
  `event`
WHERE
  `contractAddress` = '0x123'
[VERBOSE] 04/09 12:32:23 (blockchain:events:polling): Threshold block 10
[INFO] 04/09 12:32:23 (blockchain:events:polling): 1 events to be confirmed.
[DEBUG] 04/09 12:32:23 (blockchain:events:polling): New testEvent event to be confirmed. Transaction 1.1
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `logIndex`,
    `targetConfirmation`,
    `contractAddress`,
    `event`,
    `emitted`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (
    NULL,
    11,
    '1',
    1,
    1,
    '0x123',
    'testEvent',
    0,
    '2020-09-04 09:32:23.549 +00:00',
    '2020-09-04 09:32:23.549 +00:00'
  );
[INFO] 04/09 12:32:23 (blockchain:events:polling): 0 events to be emitted.
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
SELECT
  count(*) AS `count`
FROM
  `event` AS `Event`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[INFO] 04/09 12:32:23 (blockchain:events:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:32:23 (blockchain:events:polling): Received new block number 11
[WARN] 04/09 12:32:23 (blockchain:events:polling): Reorg happening! Old hash: 0x123; New hash: 0x321
[ERROR] 04/09 12:32:23 (blockchain:events:polling): Reorg out of confirmation range! Old hash: 0x222; New hash: 0x33
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
DELETE FROM
  `event`
WHERE
  `contractAddress` = '0x123'
[VERBOSE] 04/09 12:32:23 (blockchain:events:polling): Threshold block 10
[INFO] 04/09 12:32:23 (blockchain:events:polling): 1 events to be confirmed.
[DEBUG] 04/09 12:32:23 (blockchain:events:polling): New testEvent event to be confirmed. Transaction 1.1
[DEBUG] 04/09 12:32:23 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `logIndex`,
    `targetConfirmation`,
    `contractAddress`,
    `event`,
    `emitted`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (
    NULL,
    11,
    '1',
    1,
    1,
    '0x123',
    'testEvent',
    0,
    '2020-09-04 09:32:23.842 +00:00',
    '2020-09-04 09:32:23.842 +00:00'
  );
[INFO] 04/09 12:32:23 (blockchain:events:polling): 0 events to be emitted.
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
SELECT
  count(*) AS `count`
FROM
  `event` AS `Event`;
[INFO] 04/09 12:32:24 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:32:24 (blockchain:block-emitter:polling): New block with number 111 with hash 0x123
[INFO] 04/09 12:32:24 (blockchain:block-emitter:polling): Listener removing, stopping processing events.
[INFO] 04/09 12:32:24 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:32:24 (blockchain:block-emitter:polling): New block with number 10 with hash 0x123
[VERBOSE] 04/09 12:32:24 (blockchain:block-emitter:polling): New block with number 11 with hash 0x123
[INFO] 04/09 12:32:24 (blockchain:block-emitter:polling): Listener removing, stopping processing events.
[INFO] 04/09 12:32:24 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:32:24 (blockchain:block-emitter:polling): New block with number 10 with hash 0x123
[INFO] 04/09 12:32:24 (blockchain:block-emitter:polling): Listener removing, stopping processing events.
[INFO] 04/09 12:32:24 (blockchain:block-emitter:listening): Listener attached, starting processing events.
[VERBOSE] 04/09 12:32:24 (blockchain:block-emitter:listening): Current block with number 10 with hash 0x123
[INFO] 04/09 12:32:24 (blockchain:block-emitter:listening): Listener attached, starting processing events.
[VERBOSE] 04/09 12:32:24 (blockchain:block-emitter:listening): Current block with number 9 with hash 0x123
[VERBOSE] 04/09 12:32:24 (blockchain:block-emitter:listening): New block with number 9 with hash 0x123
[VERBOSE] 04/09 12:32:24 (blockchain:block-emitter:listening): New block with number 9 with hash 0x123
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:25 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:25 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:25 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:25 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:25 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:25 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:25 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:25 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:25 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:32:25 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `data-store` (
  `key` VARCHAR(255) PRIMARY KEY,
  `value` VARCHAR(255)
);
[DEBUG] 04/09 12:32:25 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`data-store`)
[DEBUG] 04/09 12:32:25 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_data-store_1`)
[DEBUG] 04/09 12:32:25 (db): Executing SQL (default):
SELECT
  `key`,
  `value`
FROM
  `data-store` AS `sequelizeStore-dbstore`;
[INFO] 04/09 12:32:26 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:32:26 (blockchain:block-emitter:polling): New block with number 10 with hash 0x123
[INFO] 04/09 12:32:26 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:32:26 (blockchain:block-emitter:polling): New block with number 10 with hash 0x123
[INFO] 04/09 12:32:27 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:32:27 (blockchain:block-emitter:polling): New block with number 10 with hash 0x123
[INFO] 04/09 12:32:27 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:32:27 (blockchain:block-emitter:polling): New block with number 10 with hash 0x123
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (b176c5dd-2677-4eb3-9b85-ce0666e5fa78):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (b176c5dd-2677-4eb3-9b85-ce0666e5fa78):
SELECT
  `Offer`.`provider`,
  `Offer`.`totalCapacity`,
  `Offer`.`peerId`,
  `Offer`.`createdAt`,
  `Offer`.`updatedAt`,
  `plans`.`id` AS `plans.id`,
  `plans`.`period` AS `plans.period`,
  `plans`.`price` AS `plans.price`,
  `plans`.`offerId` AS `plans.offerId`,
  `plans`.`createdAt` AS `plans.createdAt`,
  `plans`.`updatedAt` AS `plans.updatedAt`
FROM
  `storage_offer` AS `Offer`
  LEFT OUTER JOIN `storage_billing-plan` AS `plans` ON `Offer`.`provider` = `plans`.`offerId`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 04/09 12:32:28 (db): Executing SQL (b176c5dd-2677-4eb3-9b85-ce0666e5fa78):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:32:28 (db): Executing SQL (b176c5dd-2677-4eb3-9b85-ce0666e5fa78):
COMMIT;
[INFO] 04/09 12:32:28 (storage:handler:offer): Created new StorageOffer for TestAddress
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
SELECT
  `provider`,
  `totalCapacity`,
  `peerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_offer` AS `Offer`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:32:28 (db): Executing SQL (d015970d-c1e0-4fdd-bc08-c64a78e510b1):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (d015970d-c1e0-4fdd-bc08-c64a78e510b1):
SELECT
  `Offer`.`provider`,
  `Offer`.`totalCapacity`,
  `Offer`.`peerId`,
  `Offer`.`createdAt`,
  `Offer`.`updatedAt`,
  `plans`.`id` AS `plans.id`,
  `plans`.`period` AS `plans.period`,
  `plans`.`price` AS `plans.price`,
  `plans`.`offerId` AS `plans.offerId`,
  `plans`.`createdAt` AS `plans.createdAt`,
  `plans`.`updatedAt` AS `plans.updatedAt`
FROM
  `storage_offer` AS `Offer`
  LEFT OUTER JOIN `storage_billing-plan` AS `plans` ON `Offer`.`provider` = `plans`.`offerId`
WHERE
  `Offer`.`provider` = 'test';
[DEBUG] 04/09 12:32:28 (db): Executing SQL (d015970d-c1e0-4fdd-bc08-c64a78e510b1):
COMMIT;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
UPDATE
  `storage_offer`
SET
  `totalCapacity` = $ 1,
  `updatedAt` = $ 2
WHERE
  `provider` = $ 3
[INFO] 04/09 12:32:28 (storage:handler:offer): Updating capacity 1000 (ID: test)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (fd8662c8-8521-4666-bb23-a03d7379b756):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 04/09 12:32:28 (db): Executing SQL (fd8662c8-8521-4666-bb23-a03d7379b756):
SELECT
  `Offer`.`provider`,
  `Offer`.`totalCapacity`,
  `Offer`.`peerId`,
  `Offer`.`createdAt`,
  `Offer`.`updatedAt`,
  `plans`.`id` AS `plans.id`,
  `plans`.`period` AS `plans.period`,
  `plans`.`price` AS `plans.price`,
  `plans`.`offerId` AS `plans.offerId`,
  `plans`.`createdAt` AS `plans.createdAt`,
  `plans`.`updatedAt` AS `plans.updatedAt`
FROM
  `storage_offer` AS `Offer`
  LEFT OUTER JOIN `storage_billing-plan` AS `plans` ON `Offer`.`provider` = `plans`.`offerId`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 04/09 12:32:28 (db): Executing SQL (fd8662c8-8521-4666-bb23-a03d7379b756):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:32:28 (db): Executing SQL (fd8662c8-8521-4666-bb23-a03d7379b756):
COMMIT;
[INFO] 04/09 12:32:28 (storage:handler:offer): Created new StorageOffer for TestAddress
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
UPDATE
  `storage_offer`
SET
  `totalCapacity` = $ 1,
  `updatedAt` = $ 2
WHERE
  `provider` = $ 3
[INFO] 04/09 12:32:28 (storage:handler:offer): Updating capacity 1000 (ID: TestAddress)
[DEBUG] 04/09 12:32:28 (db): Executing SQL (default):
SELECT
  `provider`,
  `totalCapacity`,
  `peerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_offer` AS `Offer`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (96690b58-03b7-4556-9679-81e46568fc40):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (96690b58-03b7-4556-9679-81e46568fc40):
SELECT
  `Offer`.`provider`,
  `Offer`.`totalCapacity`,
  `Offer`.`peerId`,
  `Offer`.`createdAt`,
  `Offer`.`updatedAt`,
  `plans`.`id` AS `plans.id`,
  `plans`.`period` AS `plans.period`,
  `plans`.`price` AS `plans.price`,
  `plans`.`offerId` AS `plans.offerId`,
  `plans`.`createdAt` AS `plans.createdAt`,
  `plans`.`updatedAt` AS `plans.updatedAt`
FROM
  `storage_offer` AS `Offer`
  LEFT OUTER JOIN `storage_billing-plan` AS `plans` ON `Offer`.`provider` = `plans`.`offerId`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 04/09 12:32:29 (db): Executing SQL (96690b58-03b7-4556-9679-81e46568fc40):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (96690b58-03b7-4556-9679-81e46568fc40):
COMMIT;
[INFO] 04/09 12:32:29 (storage:handler:offer): Created new StorageOffer for TestAddress
[INFO] 04/09 12:32:29 (storage:handler:offer): Updating period 69696 to price 1000 (ID: TestAddress)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
SELECT
  `provider`,
  `totalCapacity`,
  `peerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_offer` AS `Offer`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
SELECT
  `id`,
  `period`,
  `price`,
  `offerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_billing-plan` AS `BillingPlan`
WHERE
  `BillingPlan`.`offerId` = 'TestAddress'
LIMIT
  1;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (49500605-3e82-411d-b8a9-98645faffdb0):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (49500605-3e82-411d-b8a9-98645faffdb0):
SELECT
  `Offer`.`provider`,
  `Offer`.`totalCapacity`,
  `Offer`.`peerId`,
  `Offer`.`createdAt`,
  `Offer`.`updatedAt`,
  `plans`.`id` AS `plans.id`,
  `plans`.`period` AS `plans.period`,
  `plans`.`price` AS `plans.price`,
  `plans`.`offerId` AS `plans.offerId`,
  `plans`.`createdAt` AS `plans.createdAt`,
  `plans`.`updatedAt` AS `plans.updatedAt`
FROM
  `storage_offer` AS `Offer`
  LEFT OUTER JOIN `storage_billing-plan` AS `plans` ON `Offer`.`provider` = `plans`.`offerId`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 04/09 12:32:29 (db): Executing SQL (49500605-3e82-411d-b8a9-98645faffdb0):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (49500605-3e82-411d-b8a9-98645faffdb0):
COMMIT;
[INFO] 04/09 12:32:29 (storage:handler:offer): Created new StorageOffer for TestAddress
[INFO] 04/09 12:32:29 (storage:handler:offer): Updating period 99 to price 1000 (ID: TestAddress)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
SELECT
  `provider`,
  `totalCapacity`,
  `peerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_offer` AS `Offer`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
SELECT
  `id`,
  `period`,
  `price`,
  `offerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_billing-plan` AS `BillingPlan`
WHERE
  `BillingPlan`.`offerId` = 'TestAddress'
  AND `BillingPlan`.`period` = '99'
LIMIT
  1;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (0a6e895f-0166-48eb-9acf-c3a5b82b1ebf):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (0a6e895f-0166-48eb-9acf-c3a5b82b1ebf):
SELECT
  `Offer`.`provider`,
  `Offer`.`totalCapacity`,
  `Offer`.`peerId`,
  `Offer`.`createdAt`,
  `Offer`.`updatedAt`,
  `plans`.`id` AS `plans.id`,
  `plans`.`period` AS `plans.period`,
  `plans`.`price` AS `plans.price`,
  `plans`.`offerId` AS `plans.offerId`,
  `plans`.`createdAt` AS `plans.createdAt`,
  `plans`.`updatedAt` AS `plans.updatedAt`
FROM
  `storage_offer` AS `Offer`
  LEFT OUTER JOIN `storage_billing-plan` AS `plans` ON `Offer`.`provider` = `plans`.`offerId`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 04/09 12:32:29 (db): Executing SQL (0a6e895f-0166-48eb-9acf-c3a5b82b1ebf):
COMMIT;
[INFO] 04/09 12:32:29 (storage:handler:offer): Updating period 99 to price 99999 (ID: TestAddress)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
UPDATE
  `storage_billing-plan`
SET
  `price` = $ 1,
  `updatedAt` = $ 2
WHERE
  `id` = $ 3
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
SELECT
  `provider`,
  `totalCapacity`,
  `peerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_offer` AS `Offer`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
SELECT
  `id`,
  `period`,
  `price`,
  `offerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_billing-plan` AS `BillingPlan`
WHERE
  `BillingPlan`.`offerId` = 'TestAddress'
  AND `BillingPlan`.`period` = '99'
LIMIT
  1;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (037af263-c042-450d-b086-b41c2395a9c5):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (037af263-c042-450d-b086-b41c2395a9c5):
SELECT
  `Offer`.`provider`,
  `Offer`.`totalCapacity`,
  `Offer`.`peerId`,
  `Offer`.`createdAt`,
  `Offer`.`updatedAt`,
  `plans`.`id` AS `plans.id`,
  `plans`.`period` AS `plans.period`,
  `plans`.`price` AS `plans.price`,
  `plans`.`offerId` AS `plans.offerId`,
  `plans`.`createdAt` AS `plans.createdAt`,
  `plans`.`updatedAt` AS `plans.updatedAt`
FROM
  `storage_offer` AS `Offer`
  LEFT OUTER JOIN `storage_billing-plan` AS `plans` ON `Offer`.`provider` = `plans`.`offerId`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 04/09 12:32:29 (db): Executing SQL (037af263-c042-450d-b086-b41c2395a9c5):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (037af263-c042-450d-b086-b41c2395a9c5):
COMMIT;
[INFO] 04/09 12:32:29 (storage:handler:offer): Created new StorageOffer for TestAddress
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
SELECT
  `provider`,
  `totalCapacity`,
  `peerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_offer` AS `Offer`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (0df08dae-a50b-49e2-b531-eb9aeaa36715):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (0df08dae-a50b-49e2-b531-eb9aeaa36715):
SELECT
  `Offer`.`provider`,
  `Offer`.`totalCapacity`,
  `Offer`.`peerId`,
  `Offer`.`createdAt`,
  `Offer`.`updatedAt`,
  `plans`.`id` AS `plans.id`,
  `plans`.`period` AS `plans.period`,
  `plans`.`price` AS `plans.price`,
  `plans`.`offerId` AS `plans.offerId`,
  `plans`.`createdAt` AS `plans.createdAt`,
  `plans`.`updatedAt` AS `plans.updatedAt`
FROM
  `storage_offer` AS `Offer`
  LEFT OUTER JOIN `storage_billing-plan` AS `plans` ON `Offer`.`provider` = `plans`.`offerId`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 04/09 12:32:29 (db): Executing SQL (0df08dae-a50b-49e2-b531-eb9aeaa36715):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (0df08dae-a50b-49e2-b531-eb9aeaa36715):
COMMIT;
[INFO] 04/09 12:32:29 (storage:handler:offer): Created new StorageOffer for TestAddress
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (ae2ac3a0-3895-4e3f-af87-c9218b5b686c):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (ae2ac3a0-3895-4e3f-af87-c9218b5b686c):
SELECT
  `Offer`.`provider`,
  `Offer`.`totalCapacity`,
  `Offer`.`peerId`,
  `Offer`.`createdAt`,
  `Offer`.`updatedAt`,
  `plans`.`id` AS `plans.id`,
  `plans`.`period` AS `plans.period`,
  `plans`.`price` AS `plans.price`,
  `plans`.`offerId` AS `plans.offerId`,
  `plans`.`createdAt` AS `plans.createdAt`,
  `plans`.`updatedAt` AS `plans.updatedAt`
FROM
  `storage_offer` AS `Offer`
  LEFT OUTER JOIN `storage_billing-plan` AS `plans` ON `Offer`.`provider` = `plans`.`offerId`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 04/09 12:32:29 (db): Executing SQL (ae2ac3a0-3895-4e3f-af87-c9218b5b686c):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (ae2ac3a0-3895-4e3f-af87-c9218b5b686c):
COMMIT;
[INFO] 04/09 12:32:29 (storage:handler:offer): Created new StorageOffer for TestAddress
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
UPDATE
  `storage_offer`
SET
  `peerId` = $ 1,
  `updatedAt` = $ 2
WHERE
  `provider` = $ 3
[INFO] 04/09 12:32:29 (storage:handler:offer): PeerId FakePeerId defined (ID: TestAddress)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
SELECT
  `provider`,
  `totalCapacity`,
  `peerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_offer` AS `Offer`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:29 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DELETE FROM
  `storage_billing-plan`
WHERE
  `offerId` = 'TestAddress'
  AND `period` = '99'
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
SELECT
  `id`,
  `period`,
  `price`,
  `offerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_billing-plan` AS `BillingPlan`
WHERE
  `BillingPlan`.`offerId` = 'TestAddress'
  AND `BillingPlan`.`period` = 99
LIMIT
  1;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
SELECT
  `id`,
  `period`,
  `price`,
  `offerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_billing-plan` AS `BillingPlan`
WHERE
  `BillingPlan`.`offerId` = 'TestAddress'
  AND `BillingPlan`.`period` = 99
LIMIT
  1;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
INSERT
  OR IGNORE INTO `storage_agreement` (
    `agreementReference`,
    `dataReference`,
    `consumer`,
    `size`,
    `isActive`,
    `billingPeriod`,
    `billingPrice`,
    `availableFunds`,
    `lastPayout`,
    `offerId`
  )
VALUES
  (
    '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2',
    'Reference1Reference2',
    '0x41677265656d656e7443726561746f72',
    '100',
    1,
    '99',
    '100',
    '100',
    '52647-01-04 13:38:33.000 +00:00',
    'TestAddress'
  );
UPDATE
  `storage_agreement`
SET
  `agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2',
  `dataReference` = 'Reference1Reference2',
  `consumer` = '0x41677265656d656e7443726561746f72',
  `offerId` = 'TestAddress',
  `size` = '100',
  `billingPeriod` = '99',
  `billingPrice` = '100',
  `availableFunds` = '100',
  `lastPayout` = '52647-01-04 13:38:33.000 +00:00'
WHERE
  (
    `agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2'
  )
[INFO] 04/09 12:32:30 (storage:handler:request): Created new Agreement with ID 0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2 for offer TestAddress
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2'
  AND `Agreement`.`offerId` = 'TestAddress';
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2';
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
INSERT INTO
  `storage_agreement` (
    `agreementReference`,
    `dataReference`,
    `consumer`,
    `size`,
    `isActive`,
    `billingPeriod`,
    `billingPrice`,
    `availableFunds`,
    `lastPayout`,
    `offerId`
  )
VALUES
  ($ 1, $ 2, $ 3, $ 4, $ 5, $ 6, $ 7, $ 8, $ 9, $ 10);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2';
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
UPDATE
  `storage_agreement`
SET
  `isActive` = $ 1
WHERE
  `agreementReference` = $ 2
[INFO] 04/09 12:32:30 (storage:handler:request): Agreement 0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2 was stopped.
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2'
  AND `Agreement`.`offerId` = 'TestAddress';
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2';
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
INSERT INTO
  `storage_agreement` (
    `agreementReference`,
    `dataReference`,
    `consumer`,
    `size`,
    `isActive`,
    `billingPeriod`,
    `billingPrice`,
    `availableFunds`,
    `lastPayout`,
    `offerId`
  )
VALUES
  ($ 1, $ 2, $ 3, $ 4, $ 5, $ 6, $ 7, $ 8, $ 9, $ 10);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2';
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
UPDATE
  `storage_agreement`
SET
  `availableFunds` = $ 1
WHERE
  `agreementReference` = $ 2
[INFO] 04/09 12:32:30 (storage:handler:request): Agreement 0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2 was topped up with 50.
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2'
  AND `Agreement`.`offerId` = 'TestAddress';
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2';
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
INSERT INTO
  `storage_agreement` (
    `agreementReference`,
    `dataReference`,
    `consumer`,
    `size`,
    `isActive`,
    `billingPeriod`,
    `billingPrice`,
    `availableFunds`,
    `lastPayout`,
    `offerId`
  )
VALUES
  ($ 1, $ 2, $ 3, $ 4, $ 5, $ 6, $ 7, $ 8, $ 9, $ 10);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2';
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
UPDATE
  `storage_agreement`
SET
  `availableFunds` = $ 1
WHERE
  `agreementReference` = $ 2
[INFO] 04/09 12:32:30 (storage:handler:request): 50 was withdrawn from funds of Agreement 0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2.
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2'
  AND `Agreement`.`offerId` = 'TestAddress';
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2';
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:30 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
INSERT INTO
  `storage_agreement` (
    `agreementReference`,
    `dataReference`,
    `consumer`,
    `size`,
    `isActive`,
    `billingPeriod`,
    `billingPrice`,
    `availableFunds`,
    `lastPayout`,
    `offerId`
  )
VALUES
  ($ 1, $ 2, $ 3, $ 4, $ 5, $ 6, $ 7, $ 8, $ 9, $ 10);
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2';
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
UPDATE
  `storage_agreement`
SET
  `availableFunds` = $ 1
WHERE
  `agreementReference` = $ 2
[INFO] 04/09 12:32:31 (storage:handler:request): 50 was payed out from funds of Agreement 0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2.
[DEBUG] 04/09 12:32:31 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2'
  AND `Agreement`.`offerId` = 'TestAddress';
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `data-store` (
  `key` VARCHAR(255) PRIMARY KEY,
  `value` VARCHAR(255)
);
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`data-store`)
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_data-store_1`)
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
SELECT
  `key`,
  `value`
FROM
  `data-store` AS `sequelizeStore-dbstore`;
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
INSERT INTO
  `rates` (
    `token`,
    `usd`,
    `eur`,
    `btc`,
    `ars`,
    `cny`,
    `krw`,
    `jpy`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  ($ 1, $ 2, $ 3, $ 4, $ 5, $ 6, $ 7, $ 8, $ 9, $ 10);
[DEBUG] 04/09 12:34:28 (db): Executing SQL (default):
SELECT
  `token`,
  `usd`,
  `eur`,
  `btc`,
  `ars`,
  `cny`,
  `krw`,
  `jpy`,
  `createdAt`,
  `updatedAt`
FROM
  `rates` AS `Rate`
WHERE
  `Rate`.`token` = 123456789012345;
[INFO] 04/09 12:34:29 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:34:29 (blockchain:block-emitter:polling): New block with number undefined with hash undefined
[WARN] 04/09 12:34:31 (cli:start): Reorg detected outside of confirmation range. Rebuilding the service's state!
[INFO] 04/09 12:34:31 (cli:start): Stopping service
[DEBUG] 04/09 12:34:31 (rates:updater): Acquiring lock for update
[INFO] 04/09 12:34:31 (rates:updater): Updating rates using coingecko provider.
[DEBUG] 04/09 12:34:31 (db): Executing SQL (dfcc45e5-f92d-4ade-9d86-c9abe2ade2b4):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 04/09 12:34:31 (db): Executing SQL (dfcc45e5-f92d-4ade-9d86-c9abe2ade2b4):
SELECT
  `token`,
  `usd`,
  `eur`,
  `btc`,
  `ars`,
  `cny`,
  `krw`,
  `jpy`,
  `createdAt`,
  `updatedAt`
FROM
  `rates` AS `Rate`
WHERE
  `Rate`.`token` = 'rif';
[DEBUG] 04/09 12:34:31 (db): Executing SQL (dfcc45e5-f92d-4ade-9d86-c9abe2ade2b4):
INSERT INTO
  `rates` (`token`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:34:31 (db): Executing SQL (dfcc45e5-f92d-4ade-9d86-c9abe2ade2b4):
COMMIT;
[DEBUG] 04/09 12:34:31 (db): Executing SQL (default):
UPDATE
  `rates`
SET
  `usd` = $ 1,
  `eur` = $ 2,
  `btc` = $ 3,
  `ars` = $ 4,
  `cny` = $ 5,
  `krw` = $ 6,
  `jpy` = $ 7,
  `updatedAt` = $ 8
WHERE
  `token` = $ 9
[DEBUG] 04/09 12:34:31 (db): Executing SQL (aec2e777-ee15-4235-9347-af9a3bff8e0f):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 04/09 12:34:31 (db): Executing SQL (aec2e777-ee15-4235-9347-af9a3bff8e0f):
SELECT
  `token`,
  `usd`,
  `eur`,
  `btc`,
  `ars`,
  `cny`,
  `krw`,
  `jpy`,
  `createdAt`,
  `updatedAt`
FROM
  `rates` AS `Rate`
WHERE
  `Rate`.`token` = 'rbtc';
[DEBUG] 04/09 12:34:31 (db): Executing SQL (aec2e777-ee15-4235-9347-af9a3bff8e0f):
INSERT INTO
  `rates` (`token`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:34:31 (db): Executing SQL (aec2e777-ee15-4235-9347-af9a3bff8e0f):
COMMIT;
[DEBUG] 04/09 12:34:31 (db): Executing SQL (default):
UPDATE
  `rates`
SET
  `usd` = $ 1,
  `eur` = $ 2,
  `btc` = $ 3,
  `ars` = $ 4,
  `cny` = $ 5,
  `krw` = $ 6,
  `jpy` = $ 7,
  `updatedAt` = $ 8
WHERE
  `token` = $ 9
[INFO] 04/09 12:34:31 (cli:start): Restarting the app
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `data-store` (
  `key` VARCHAR(255) PRIMARY KEY,
  `value` VARCHAR(255)
);
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`data-store`)
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_data-store_1`)
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
SELECT
  `key`,
  `value`
FROM
  `data-store` AS `sequelizeStore-dbstore`;
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
INSERT INTO
  `rates` (
    `token`,
    `usd`,
    `eur`,
    `btc`,
    `ars`,
    `cny`,
    `krw`,
    `jpy`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  ($ 1, $ 2, $ 3, $ 4, $ 5, $ 6, $ 7, $ 8, $ 9, $ 10);
[DEBUG] 04/09 12:35:34 (db): Executing SQL (default):
SELECT
  `token`,
  `usd`,
  `eur`,
  `btc`,
  `ars`,
  `cny`,
  `krw`,
  `jpy`,
  `createdAt`,
  `updatedAt`
FROM
  `rates` AS `Rate`
WHERE
  `Rate`.`token` = 123456789012345;
[INFO] 04/09 12:35:35 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:35:35 (blockchain:block-emitter:polling): New block with number undefined with hash undefined
[WARN] 04/09 12:35:37 (cli:start): Reorg detected outside of confirmation range. Rebuilding the service's state!
[INFO] 04/09 12:35:37 (cli:start): Stopping service
[DEBUG] 04/09 12:35:37 (rates:updater): Acquiring lock for update
[INFO] 04/09 12:35:37 (rates:updater): Updating rates using coingecko provider.
[DEBUG] 04/09 12:35:37 (db): Executing SQL (1e13f623-0f4e-48c2-adbd-2bafacf7a6e6):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 04/09 12:35:37 (db): Executing SQL (1e13f623-0f4e-48c2-adbd-2bafacf7a6e6):
SELECT
  `token`,
  `usd`,
  `eur`,
  `btc`,
  `ars`,
  `cny`,
  `krw`,
  `jpy`,
  `createdAt`,
  `updatedAt`
FROM
  `rates` AS `Rate`
WHERE
  `Rate`.`token` = 'rif';
[DEBUG] 04/09 12:35:37 (db): Executing SQL (1e13f623-0f4e-48c2-adbd-2bafacf7a6e6):
INSERT INTO
  `rates` (`token`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:35:37 (db): Executing SQL (1e13f623-0f4e-48c2-adbd-2bafacf7a6e6):
COMMIT;
[DEBUG] 04/09 12:35:37 (db): Executing SQL (default):
UPDATE
  `rates`
SET
  `usd` = $ 1,
  `eur` = $ 2,
  `btc` = $ 3,
  `ars` = $ 4,
  `cny` = $ 5,
  `krw` = $ 6,
  `jpy` = $ 7,
  `updatedAt` = $ 8
WHERE
  `token` = $ 9
[DEBUG] 04/09 12:35:37 (db): Executing SQL (c7c1b4e1-a6c2-4a6f-9a1e-b585a65c4251):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 04/09 12:35:37 (db): Executing SQL (c7c1b4e1-a6c2-4a6f-9a1e-b585a65c4251):
SELECT
  `token`,
  `usd`,
  `eur`,
  `btc`,
  `ars`,
  `cny`,
  `krw`,
  `jpy`,
  `createdAt`,
  `updatedAt`
FROM
  `rates` AS `Rate`
WHERE
  `Rate`.`token` = 'rbtc';
[DEBUG] 04/09 12:35:37 (db): Executing SQL (c7c1b4e1-a6c2-4a6f-9a1e-b585a65c4251):
INSERT INTO
  `rates` (`token`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:35:37 (db): Executing SQL (c7c1b4e1-a6c2-4a6f-9a1e-b585a65c4251):
COMMIT;
[DEBUG] 04/09 12:35:37 (db): Executing SQL (default):
UPDATE
  `rates`
SET
  `usd` = $ 1,
  `eur` = $ 2,
  `btc` = $ 3,
  `ars` = $ 4,
  `cny` = $ 5,
  `krw` = $ 6,
  `jpy` = $ 7,
  `updatedAt` = $ 8
WHERE
  `token` = $ 9
[INFO] 04/09 12:35:37 (cli:start): Restarting the app
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `data-store` (
  `key` VARCHAR(255) PRIMARY KEY,
  `value` VARCHAR(255)
);
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`data-store`)
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_data-store_1`)
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
SELECT
  `key`,
  `value`
FROM
  `data-store` AS `sequelizeStore-dbstore`;
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
INSERT INTO
  `rates` (
    `token`,
    `usd`,
    `eur`,
    `btc`,
    `ars`,
    `cny`,
    `krw`,
    `jpy`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  ($ 1, $ 2, $ 3, $ 4, $ 5, $ 6, $ 7, $ 8, $ 9, $ 10);
[DEBUG] 04/09 12:36:56 (db): Executing SQL (default):
SELECT
  `token`,
  `usd`,
  `eur`,
  `btc`,
  `ars`,
  `cny`,
  `krw`,
  `jpy`,
  `createdAt`,
  `updatedAt`
FROM
  `rates` AS `Rate`
WHERE
  `Rate`.`token` = 123456789012345;
[INFO] 04/09 12:36:57 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:36:57 (blockchain:block-emitter:polling): New block with number undefined with hash undefined
[WARN] 04/09 12:36:59 (cli:start): Reorg detected outside of confirmation range. Rebuilding the service's state!
[INFO] 04/09 12:36:59 (cli:start): Stopping service
[DEBUG] 04/09 12:36:59 (rates:updater): Acquiring lock for update
[INFO] 04/09 12:36:59 (rates:updater): Updating rates using coingecko provider.
[DEBUG] 04/09 12:37:00 (db): Executing SQL (36a80d55-8516-4dff-9a14-35439bec3cff):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 04/09 12:37:00 (db): Executing SQL (36a80d55-8516-4dff-9a14-35439bec3cff):
SELECT
  `token`,
  `usd`,
  `eur`,
  `btc`,
  `ars`,
  `cny`,
  `krw`,
  `jpy`,
  `createdAt`,
  `updatedAt`
FROM
  `rates` AS `Rate`
WHERE
  `Rate`.`token` = 'rif';
[DEBUG] 04/09 12:37:00 (db): Executing SQL (36a80d55-8516-4dff-9a14-35439bec3cff):
INSERT INTO
  `rates` (`token`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:37:00 (db): Executing SQL (36a80d55-8516-4dff-9a14-35439bec3cff):
COMMIT;
[DEBUG] 04/09 12:37:00 (db): Executing SQL (default):
UPDATE
  `rates`
SET
  `usd` = $ 1,
  `eur` = $ 2,
  `btc` = $ 3,
  `ars` = $ 4,
  `cny` = $ 5,
  `krw` = $ 6,
  `jpy` = $ 7,
  `updatedAt` = $ 8
WHERE
  `token` = $ 9
[DEBUG] 04/09 12:37:00 (db): Executing SQL (1fe97f74-890a-47a3-8fd7-f9053663b817):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 04/09 12:37:00 (db): Executing SQL (1fe97f74-890a-47a3-8fd7-f9053663b817):
SELECT
  `token`,
  `usd`,
  `eur`,
  `btc`,
  `ars`,
  `cny`,
  `krw`,
  `jpy`,
  `createdAt`,
  `updatedAt`
FROM
  `rates` AS `Rate`
WHERE
  `Rate`.`token` = 'rbtc';
[DEBUG] 04/09 12:37:00 (db): Executing SQL (1fe97f74-890a-47a3-8fd7-f9053663b817):
INSERT INTO
  `rates` (`token`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:37:00 (db): Executing SQL (1fe97f74-890a-47a3-8fd7-f9053663b817):
COMMIT;
[DEBUG] 04/09 12:37:00 (db): Executing SQL (default):
UPDATE
  `rates`
SET
  `usd` = $ 1,
  `eur` = $ 2,
  `btc` = $ 3,
  `ars` = $ 4,
  `cny` = $ 5,
  `krw` = $ 6,
  `jpy` = $ 7,
  `updatedAt` = $ 8
WHERE
  `token` = $ 9
[INFO] 04/09 12:37:00 (cli:start): Restarting the app
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `data-store` (
  `key` VARCHAR(255) PRIMARY KEY,
  `value` VARCHAR(255)
);
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`data-store`)
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_data-store_1`)
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
SELECT
  `key`,
  `value`
FROM
  `data-store` AS `sequelizeStore-dbstore`;
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
INSERT INTO
  `rates` (
    `token`,
    `usd`,
    `eur`,
    `btc`,
    `ars`,
    `cny`,
    `krw`,
    `jpy`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  ($ 1, $ 2, $ 3, $ 4, $ 5, $ 6, $ 7, $ 8, $ 9, $ 10);
[DEBUG] 04/09 12:38:10 (db): Executing SQL (default):
SELECT
  `token`,
  `usd`,
  `eur`,
  `btc`,
  `ars`,
  `cny`,
  `krw`,
  `jpy`,
  `createdAt`,
  `updatedAt`
FROM
  `rates` AS `Rate`
WHERE
  `Rate`.`token` = 123456789012345;
[INFO] 04/09 12:38:11 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:38:11 (blockchain:block-emitter:polling): New block with number undefined with hash undefined
[WARN] 04/09 12:38:13 (cli:start): Reorg detected outside of confirmation range. Rebuilding the service's state!
[INFO] 04/09 12:38:13 (cli:start): Stopping service
[DEBUG] 04/09 12:38:13 (rates:updater): Acquiring lock for update
[INFO] 04/09 12:38:13 (rates:updater): Updating rates using coingecko provider.
[DEBUG] 04/09 12:38:13 (db): Executing SQL (b491da4a-8eee-45e0-98de-ce127c056914):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 04/09 12:38:13 (db): Executing SQL (b491da4a-8eee-45e0-98de-ce127c056914):
SELECT
  `token`,
  `usd`,
  `eur`,
  `btc`,
  `ars`,
  `cny`,
  `krw`,
  `jpy`,
  `createdAt`,
  `updatedAt`
FROM
  `rates` AS `Rate`
WHERE
  `Rate`.`token` = 'rif';
[DEBUG] 04/09 12:38:13 (db): Executing SQL (b491da4a-8eee-45e0-98de-ce127c056914):
INSERT INTO
  `rates` (`token`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:38:13 (db): Executing SQL (b491da4a-8eee-45e0-98de-ce127c056914):
COMMIT;
[DEBUG] 04/09 12:38:13 (db): Executing SQL (default):
UPDATE
  `rates`
SET
  `usd` = $ 1,
  `eur` = $ 2,
  `btc` = $ 3,
  `ars` = $ 4,
  `cny` = $ 5,
  `krw` = $ 6,
  `jpy` = $ 7,
  `updatedAt` = $ 8
WHERE
  `token` = $ 9
[DEBUG] 04/09 12:38:13 (db): Executing SQL (c3d4319f-7bed-41b9-b373-a96526921d02):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 04/09 12:38:13 (db): Executing SQL (c3d4319f-7bed-41b9-b373-a96526921d02):
SELECT
  `token`,
  `usd`,
  `eur`,
  `btc`,
  `ars`,
  `cny`,
  `krw`,
  `jpy`,
  `createdAt`,
  `updatedAt`
FROM
  `rates` AS `Rate`
WHERE
  `Rate`.`token` = 'rbtc';
[DEBUG] 04/09 12:38:13 (db): Executing SQL (c3d4319f-7bed-41b9-b373-a96526921d02):
INSERT INTO
  `rates` (`token`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:38:13 (db): Executing SQL (c3d4319f-7bed-41b9-b373-a96526921d02):
COMMIT;
[DEBUG] 04/09 12:38:13 (db): Executing SQL (default):
UPDATE
  `rates`
SET
  `usd` = $ 1,
  `eur` = $ 2,
  `btc` = $ 3,
  `ars` = $ 4,
  `cny` = $ 5,
  `krw` = $ 6,
  `jpy` = $ 7,
  `updatedAt` = $ 8
WHERE
  `token` = $ 9
[INFO] 04/09 12:38:13 (cli:start): Restarting the app
[DEBUG] 04/09 12:38:16 (db): Executing SQL (default):
SELECT
  `token`,
  `usd`,
  `eur`,
  `btc`,
  `ars`,
  `cny`,
  `krw`,
  `jpy`,
  `createdAt`,
  `updatedAt`
FROM
  `rates` AS `Rate`
WHERE
  `Rate`.`token` = '123456789012345';
[INFO] 04/09 12:38:40 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:38:40 (blockchain:block-emitter:polling): New block with number 10 with hash 0x123
[INFO] 04/09 12:38:41 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:38:41 (blockchain:block-emitter:polling): New block with number 10 with hash 0x123
[INFO] 04/09 12:38:41 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:38:41 (blockchain:block-emitter:polling): New block with number 10 with hash 0x123
[INFO] 04/09 12:38:42 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:38:42 (blockchain:block-emitter:polling): New block with number 10 with hash 0x123
[INFO] 04/09 12:39:54 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:39:54 (blockchain:block-emitter:polling): New block with number 10 with hash 0x123
[INFO] 04/09 12:39:54 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:39:54 (blockchain:block-emitter:polling): New block with number 10 with hash 0x123
[INFO] 04/09 12:39:55 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:39:55 (blockchain:block-emitter:polling): New block with number 10 with hash 0x123
[INFO] 04/09 12:39:55 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:39:55 (blockchain:block-emitter:polling): New block with number 10 with hash 0x123
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `targetConfirmation`,
    `contractAddress`,
    `event`,
    `content`,
    `emitted`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (
    NULL,
    7,
    '1',
    3,
    '0x123',
    'testEvent',
    '{"event": "testEvent", "blockNumber": 7, "blockHash": "0x123"}',
    1,
    '2020-09-04 09:41:06.355 +00:00',
    '2020-09-04 09:41:06.355 +00:00'
  ),(
    NULL,
    8,
    '2',
    4,
    '0x123',
    'testEvent',
    '{"event": "testEvent", "blockNumber": 8, "blockHash": "0x123"}',
    0,
    '2020-09-04 09:41:06.355 +00:00',
    '2020-09-04 09:41:06.355 +00:00'
  ),(
    NULL,
    9,
    '3',
    2,
    '0x123',
    'niceEvent',
    '{"event": "niceEvent", "blockNumber": 9, "blockHash": "0x123"}',
    0,
    '2020-09-04 09:41:06.355 +00:00',
    '2020-09-04 09:41:06.355 +00:00'
  ),(
    NULL,
    9,
    '3',
    2,
    '0x123',
    'otherEvent',
    '{"event": "otherEvent", "blockNumber": 9, "blockHash": "0x123"}',
    0,
    '2020-09-04 09:41:06.355 +00:00',
    '2020-09-04 09:41:06.355 +00:00'
  ),(
    NULL,
    9,
    '4',
    2,
    '0x123',
    'completelyDifferentEvent',
    '{"event": "completelyDifferentEvent", "blockNumber": 9, "blockHash": "0x123"}',
    1,
    '2020-09-04 09:41:06.355 +00:00',
    '2020-09-04 09:41:06.355 +00:00'
  );
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
SELECT
  `id`,
  `blockNumber`,
  `transactionHash`,
  `logIndex`,
  `targetConfirmation`,
  `contractAddress`,
  `event`,
  `content`,
  `emitted`,
  `createdAt`,
  `updatedAt`
FROM
  `event` AS `Event`
WHERE
  `Event`.`contractAddress` = '0x123'
  AND `Event`.`emitted` = 0;
[DEBUG] 04/09 12:41:06 (blockchain:confirmator): Confirming event
{ event: 'niceEvent', blockNumber: 9, blockHash: '0x123' }
[DEBUG] 04/09 12:41:06 (blockchain:confirmator): Confirming event
{ event: 'otherEvent', blockNumber: 9, blockHash: '0x123' }
[INFO] 04/09 12:41:06 (blockchain:confirmator): Confirmed 2 events.
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
UPDATE
  `event`
SET
  `emitted` = $ 1,
  `updatedAt` = $ 2
WHERE
  `id` IN (3, 4)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DELETE FROM
  `event`
WHERE
  `emitted` = 1
  AND `contractAddress` = '0x123'
  AND `blockNumber` <= 1 - `targetConfirmation`
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
SELECT
  count(*) AS `count`
FROM
  `event` AS `Event`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `targetConfirmation`,
    `contractAddress`,
    `event`,
    `content`,
    `emitted`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (
    NULL,
    9,
    '3',
    2,
    '0x123',
    'niceEvent',
    '{"event": "niceEvent", "blockNumber": 9, "blockHash": "0x123"}',
    0,
    '2020-09-04 09:41:06.581 +00:00',
    '2020-09-04 09:41:06.581 +00:00'
  ),(
    NULL,
    8,
    '2',
    2,
    '0x123',
    'otherEvent',
    '{"event": "otherEvent", "blockNumber": 8, "blockHash": "0x123"}',
    0,
    '2020-09-04 09:41:06.581 +00:00',
    '2020-09-04 09:41:06.581 +00:00'
  );
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
SELECT
  `id`,
  `blockNumber`,
  `transactionHash`,
  `logIndex`,
  `targetConfirmation`,
  `contractAddress`,
  `event`,
  `content`,
  `emitted`,
  `createdAt`,
  `updatedAt`
FROM
  `event` AS `Event`
WHERE
  `Event`.`contractAddress` = '0x123'
  AND `Event`.`emitted` = 0;
[DEBUG] 04/09 12:41:06 (blockchain:confirmator): Confirming event
{ event: 'niceEvent', blockNumber: 9, blockHash: '0x123' }
[DEBUG] 04/09 12:41:06 (blockchain:confirmator): Confirming event
{ event: 'otherEvent', blockNumber: 8, blockHash: '0x123' }
[INFO] 04/09 12:41:06 (blockchain:confirmator): Confirmed 2 events.
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
UPDATE
  `event`
SET
  `emitted` = $ 1,
  `updatedAt` = $ 2
WHERE
  `id` IN (1, 2)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DELETE FROM
  `event`
WHERE
  `emitted` = 1
  AND `contractAddress` = '0x123'
  AND `blockNumber` <= 3 - `targetConfirmation`
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
SELECT
  count(*) AS `count`
FROM
  `event` AS `Event`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `targetConfirmation`,
    `contractAddress`,
    `event`,
    `content`,
    `emitted`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (
    NULL,
    8,
    '2',
    4,
    '0x0',
    'testEvent',
    '{"event": "testEvent", "blockNumber": 8, "blockHash": "0x123"}',
    0,
    '2020-09-04 09:41:06.808 +00:00',
    '2020-09-04 09:41:06.808 +00:00'
  ),(
    NULL,
    8,
    '2',
    4,
    '0x123',
    'testEvent',
    '{"event": "testEvent", "blockNumber": 8, "blockHash": "0x123"}',
    0,
    '2020-09-04 09:41:06.808 +00:00',
    '2020-09-04 09:41:06.808 +00:00'
  ),(
    NULL,
    9,
    '3',
    2,
    '0x123',
    'niceEvent',
    '{"event": "niceEvent", "blockNumber": 9, "blockHash": "0x123"}',
    0,
    '2020-09-04 09:41:06.808 +00:00',
    '2020-09-04 09:41:06.808 +00:00'
  ),(
    NULL,
    9,
    '3',
    2,
    '0x0',
    'otherEvent',
    '{"event": "otherEvent", "blockNumber": 9, "blockHash": "0x123"}',
    0,
    '2020-09-04 09:41:06.808 +00:00',
    '2020-09-04 09:41:06.808 +00:00'
  ),(
    NULL,
    9,
    '4',
    2,
    '0x123',
    'completelyDifferentEvent',
    '{"event": "completelyDifferentEvent", "blockNumber": 9, "blockHash": "0x123"}',
    1,
    '2020-09-04 09:41:06.808 +00:00',
    '2020-09-04 09:41:06.808 +00:00'
  );
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
SELECT
  `id`,
  `blockNumber`,
  `transactionHash`,
  `logIndex`,
  `targetConfirmation`,
  `contractAddress`,
  `event`,
  `content`,
  `emitted`,
  `createdAt`,
  `updatedAt`
FROM
  `event` AS `Event`
WHERE
  `Event`.`contractAddress` = '0x123'
  AND `Event`.`emitted` = 0;
[DEBUG] 04/09 12:41:06 (blockchain:confirmator): Confirming event
{ event: 'niceEvent', blockNumber: 9, blockHash: '0x123' }
[INFO] 04/09 12:41:06 (blockchain:confirmator): Confirmed 1 events.
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
UPDATE
  `event`
SET
  `emitted` = $ 1,
  `updatedAt` = $ 2
WHERE
  `id` IN (3)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DELETE FROM
  `event`
WHERE
  `emitted` = 1
  AND `contractAddress` = '0x123'
  AND `blockNumber` <= 1 - `targetConfirmation`
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
SELECT
  count(*) AS `count`
FROM
  `event` AS `Event`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:06 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `targetConfirmation`,
    `contractAddress`,
    `event`,
    `emitted`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (
    NULL,
    7,
    '1',
    3,
    '0x123',
    'testEvent',
    1,
    '2020-09-04 09:41:07.053 +00:00',
    '2020-09-04 09:41:07.053 +00:00'
  ),(
    NULL,
    15,
    '3',
    3,
    '0x123',
    'niceEvent',
    1,
    '2020-09-04 09:41:07.053 +00:00',
    '2020-09-04 09:41:07.053 +00:00'
  ),(
    NULL,
    16,
    '3',
    3,
    '0x123',
    'otherEvent',
    1,
    '2020-09-04 09:41:07.053 +00:00',
    '2020-09-04 09:41:07.053 +00:00'
  ),(
    NULL,
    15,
    '4',
    4,
    '0x123',
    'completelyDifferentEvent',
    1,
    '2020-09-04 09:41:07.053 +00:00',
    '2020-09-04 09:41:07.053 +00:00'
  );
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
SELECT
  `id`,
  `blockNumber`,
  `transactionHash`,
  `logIndex`,
  `targetConfirmation`,
  `contractAddress`,
  `event`,
  `content`,
  `emitted`,
  `createdAt`,
  `updatedAt`
FROM
  `event` AS `Event`
WHERE
  `Event`.`contractAddress` = '0x123'
  AND `Event`.`emitted` = 0;
[INFO] 04/09 12:41:07 (blockchain:confirmator): Confirmed 0 events.
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
UPDATE
  `event`
SET
  `emitted` = $ 1,
  `updatedAt` = $ 2
WHERE
  `id` IN (NULL)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DELETE FROM
  `event`
WHERE
  `emitted` = 1
  AND `contractAddress` = '0x123'
  AND `blockNumber` <= 18 - `targetConfirmation`
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
SELECT
  count(*) AS `count`
FROM
  `event` AS `Event`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
SELECT
  `id`,
  `blockNumber`,
  `transactionHash`,
  `logIndex`,
  `targetConfirmation`,
  `contractAddress`,
  `event`,
  `content`,
  `emitted`,
  `createdAt`,
  `updatedAt`
FROM
  `event` AS `Event`
WHERE
  `Event`.`event` = 'testEvent'
  AND `Event`.`blockNumber` = 7
  AND `Event`.`transactionHash` = '1'
LIMIT
  1;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
SELECT
  `id`,
  `blockNumber`,
  `transactionHash`,
  `logIndex`,
  `targetConfirmation`,
  `contractAddress`,
  `event`,
  `content`,
  `emitted`,
  `createdAt`,
  `updatedAt`
FROM
  `event` AS `Event`
WHERE
  `Event`.`event` = 'niceEvent'
  AND `Event`.`blockNumber` = 15
  AND `Event`.`transactionHash` = '3'
LIMIT
  1;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
SELECT
  `id`,
  `blockNumber`,
  `transactionHash`,
  `logIndex`,
  `targetConfirmation`,
  `contractAddress`,
  `event`,
  `content`,
  `emitted`,
  `createdAt`,
  `updatedAt`
FROM
  `event` AS `Event`
WHERE
  `Event`.`event` = 'otherEvent'
  AND `Event`.`blockNumber` = 16
  AND `Event`.`transactionHash` = '3'
LIMIT
  1;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
SELECT
  `id`,
  `blockNumber`,
  `transactionHash`,
  `logIndex`,
  `targetConfirmation`,
  `contractAddress`,
  `event`,
  `content`,
  `emitted`,
  `createdAt`,
  `updatedAt`
FROM
  `event` AS `Event`
WHERE
  `Event`.`event` = 'completelyDifferentEvent'
  AND `Event`.`blockNumber` = 15
  AND `Event`.`transactionHash` = '4'
LIMIT
  1;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `targetConfirmation`,
    `contractAddress`,
    `event`,
    `emitted`,
    `createdAt`,
    `updatedAt`,
    `content`
  )
VALUES
  (
    NULL,
    7,
    '1',
    3,
    '0x123',
    'testEvent',
    1,
    '2020-09-04 09:41:07.308 +00:00',
    '2020-09-04 09:41:07.308 +00:00',
    NULL
  ),(
    NULL,
    7,
    '2',
    3,
    '0x123',
    'testEvent',
    1,
    '2020-09-04 09:41:07.308 +00:00',
    '2020-09-04 09:41:07.308 +00:00',
    NULL
  ),(
    NULL,
    9,
    '3',
    2,
    '0x123',
    'niceEvent',
    0,
    '2020-09-04 09:41:07.308 +00:00',
    '2020-09-04 09:41:07.308 +00:00',
    NULL
  ),(
    NULL,
    9,
    '4',
    2,
    '0x123',
    'otherEvent',
    0,
    '2020-09-04 09:41:07.308 +00:00',
    '2020-09-04 09:41:07.308 +00:00',
    NULL
  ),(
    NULL,
    9,
    '5',
    2,
    '0x123',
    'completelyDifferentEvent',
    0,
    '2020-09-04 09:41:07.308 +00:00',
    '2020-09-04 09:41:07.308 +00:00',
    '{"event": "completelyDifferentEvent", "blockNumber": 9, "blockHash": "0x123"}'
  );
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
SELECT
  `id`,
  `blockNumber`,
  `transactionHash`,
  `logIndex`,
  `targetConfirmation`,
  `contractAddress`,
  `event`,
  `content`,
  `emitted`,
  `createdAt`,
  `updatedAt`
FROM
  `event` AS `Event`
WHERE
  `Event`.`contractAddress` = '0x123'
  AND `Event`.`emitted` = 0;
[WARN] 04/09 12:41:07 (blockchain:confirmator): Event niceEvent of transaction 3 does not have valid receipt!
      Block numbers: 9 (event) vs 10 (receipt) and receipt status: true 
[WARN] 04/09 12:41:07 (blockchain:confirmator): Event otherEvent of transaction 4 does not have valid receipt!
      Block numbers: 9 (event) vs 9 (receipt) and receipt status: false 
[DEBUG] 04/09 12:41:07 (blockchain:confirmator): Confirming event
{ event: 'completelyDifferentEvent',
  blockNumber: 9,
  blockHash: '0x123' }
[INFO] 04/09 12:41:07 (blockchain:confirmator): Confirmed 1 events.
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
UPDATE
  `event`
SET
  `emitted` = $ 1,
  `updatedAt` = $ 2
WHERE
  `id` IN (5)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DELETE FROM
  `event`
WHERE
  `id` IN (3, 4)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DELETE FROM
  `event`
WHERE
  `emitted` = 1
  AND `contractAddress` = '0x123'
  AND `blockNumber` <= 1 - `targetConfirmation`
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
SELECT
  count(*) AS `count`
FROM
  `event` AS `Event`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `targetConfirmation`,
    `contractAddress`,
    `event`,
    `content`,
    `emitted`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (
    NULL,
    7,
    '1',
    3,
    '0x666',
    'testEvent',
    '{"event": "testEvent", "blockNumber": 7, "blockHash": "0x123"}',
    1,
    '2020-09-04 09:41:07.547 +00:00',
    '2020-09-04 09:41:07.547 +00:00'
  ),(
    NULL,
    8,
    '2',
    4,
    '0x123',
    'testEvent',
    '{"event": "testEvent", "blockNumber": 8, "blockHash": "0x123"}',
    0,
    '2020-09-04 09:41:07.547 +00:00',
    '2020-09-04 09:41:07.547 +00:00'
  ),(
    NULL,
    9,
    '3',
    2,
    '0x123',
    'niceEvent',
    '{"event": "niceEvent", "blockNumber": 9, "blockHash": "0x123"}',
    0,
    '2020-09-04 09:41:07.547 +00:00',
    '2020-09-04 09:41:07.547 +00:00'
  ),(
    NULL,
    9,
    '4',
    2,
    '0x123',
    'otherEvent',
    '{"event": "otherEvent", "blockNumber": 9, "blockHash": "0x123"}',
    0,
    '2020-09-04 09:41:07.547 +00:00',
    '2020-09-04 09:41:07.547 +00:00'
  ),(
    NULL,
    9,
    '5',
    2,
    '0x123',
    'completelyDifferentEvent',
    '{"event": "completelyDifferentEvent", "blockNumber": 9, "blockHash": "0x123"}',
    1,
    '2020-09-04 09:41:07.547 +00:00',
    '2020-09-04 09:41:07.547 +00:00'
  );
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
SELECT
  `id`,
  `blockNumber`,
  `transactionHash`,
  `logIndex`,
  `targetConfirmation`,
  `contractAddress`,
  `event`,
  `content`,
  `emitted`,
  `createdAt`,
  `updatedAt`
FROM
  `event` AS `Event`
WHERE
  `Event`.`contractAddress` = '0x123';
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `targetConfirmation`,
    `event`,
    `emitted`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (
    NULL,
    7,
    '1',
    3,
    'testEvent',
    1,
    '2020-09-04 09:41:07.749 +00:00',
    '2020-09-04 09:41:07.749 +00:00'
  ),(
    NULL,
    8,
    '2',
    3,
    'testEvent',
    1,
    '2020-09-04 09:41:07.749 +00:00',
    '2020-09-04 09:41:07.749 +00:00'
  ),(
    NULL,
    9,
    '3',
    3,
    'niceEvent',
    0,
    '2020-09-04 09:41:07.749 +00:00',
    '2020-09-04 09:41:07.749 +00:00'
  ),(
    NULL,
    9,
    '3',
    2,
    'otherEvent',
    1,
    '2020-09-04 09:41:07.749 +00:00',
    '2020-09-04 09:41:07.749 +00:00'
  ),(
    NULL,
    10,
    '4',
    3,
    'otherEvent',
    0,
    '2020-09-04 09:41:07.749 +00:00',
    '2020-09-04 09:41:07.749 +00:00'
  );
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
SELECT
  `blockNumber`,
  `transactionHash`,
  `event`,
  `targetConfirmation`
FROM
  `event` AS `Event`
GROUP BY
  `transactionHash`,
  `event`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:07 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[INFO] 04/09 12:41:07 (blockchain:events:dummy): Listener attached, starting processing events.
[INFO] 04/09 12:41:07 (blockchain:events:dummy): => Processing past events from genesis to 11
[DEBUG] 04/09 12:41:08 (blockchain:events:dummy): Emitting event
[DEBUG] 04/09 12:41:08 (blockchain:events:dummy): Emitting event
[DEBUG] 04/09 12:41:08 (blockchain:events:dummy): Emitting event
[DEBUG] 04/09 12:41:08 (blockchain:events:dummy): Emitting event
[INFO] 04/09 12:41:08 (blockchain:events:dummy): => Finished processing past events in 0s
[DEBUG] 04/09 12:41:08 (blockchain:events:dummy): Emitting event
[DEBUG] 04/09 12:41:08 (blockchain:events:dummy): Emitting event
[DEBUG] 04/09 12:41:08 (blockchain:events:dummy): Emitting event
[DEBUG] 04/09 12:41:08 (blockchain:events:dummy): Emitting event
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[INFO] 04/09 12:41:08 (blockchain:events:dummy): Listener attached, starting processing events.
[INFO] 04/09 12:41:08 (blockchain:events:dummy): => Processing past events from genesis to 10
[VERBOSE] 04/09 12:41:08 (blockchain:events:dummy): Threshold block 8
[INFO] 04/09 12:41:08 (blockchain:events:dummy): 2 events to be confirmed.
[DEBUG] 04/09 12:41:08 (blockchain:events:dummy): New testEvent event to be confirmed. Transaction 3.1
[DEBUG] 04/09 12:41:08 (blockchain:events:dummy): New testEvent event to be confirmed. Transaction 4.1
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `logIndex`,
    `targetConfirmation`,
    `contractAddress`,
    `event`,
    `emitted`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (
    NULL,
    9,
    '3',
    1,
    2,
    '[Function: SubstituteJS] -> replace',
    'testEvent',
    0,
    '2020-09-04 09:41:08.311 +00:00',
    '2020-09-04 09:41:08.311 +00:00'
  ),(
    NULL,
    10,
    '4',
    1,
    2,
    '[Function: SubstituteJS] -> replace',
    'testEvent',
    0,
    '2020-09-04 09:41:08.311 +00:00',
    '2020-09-04 09:41:08.311 +00:00'
  );
[INFO] 04/09 12:41:08 (blockchain:events:dummy): 2 events to be emitted.
[DEBUG] 04/09 12:41:08 (blockchain:events:dummy): Emitting event
[DEBUG] 04/09 12:41:08 (blockchain:events:dummy): Emitting event
[INFO] 04/09 12:41:08 (blockchain:events:dummy): => Finished processing past events in 0s
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
SELECT
  count(*) AS `count`
FROM
  `event` AS `Event`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[INFO] 04/09 12:41:08 (blockchain:events:dummy): Listener attached, starting processing events.
[VERBOSE] 04/09 12:41:08 (blockchain:events:dummy): Threshold block 8
[INFO] 04/09 12:41:08 (blockchain:events:dummy): 2 events to be confirmed.
[DEBUG] 04/09 12:41:08 (blockchain:events:dummy): New testEvent event to be confirmed. Transaction 3.1
[DEBUG] 04/09 12:41:08 (blockchain:events:dummy): New testEvent event to be confirmed. Transaction 4.1
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `logIndex`,
    `targetConfirmation`,
    `contractAddress`,
    `event`,
    `emitted`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (
    NULL,
    9,
    '3',
    1,
    2,
    '[Function: SubstituteJS] -> replace',
    'testEvent',
    0,
    '2020-09-04 09:41:08.574 +00:00',
    '2020-09-04 09:41:08.574 +00:00'
  ),(
    NULL,
    10,
    '4',
    1,
    2,
    '[Function: SubstituteJS] -> replace',
    'testEvent',
    0,
    '2020-09-04 09:41:08.574 +00:00',
    '2020-09-04 09:41:08.574 +00:00'
  );
[INFO] 04/09 12:41:08 (blockchain:events:dummy): 2 events to be emitted.
[DEBUG] 04/09 12:41:08 (blockchain:events:dummy): Emitting event
[DEBUG] 04/09 12:41:08 (blockchain:events:dummy): Emitting event
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
SELECT
  count(*) AS `count`
FROM
  `event` AS `Event`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[INFO] 04/09 12:41:08 (blockchain:events:dummy): Listener attached, starting processing events.
[INFO] 04/09 12:41:08 (blockchain:events:dummy): => Processing past events from genesis to 10
[DEBUG] 04/09 12:41:08 (blockchain:events:dummy): Emitting event
[DEBUG] 04/09 12:41:08 (blockchain:events:dummy): Emitting event
[DEBUG] 04/09 12:41:08 (blockchain:events:dummy): Emitting event
[INFO] 04/09 12:41:08 (blockchain:events:dummy): => Finished processing past events in 0s
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:08 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[INFO] 04/09 12:41:09 (blockchain:events:dummy): Listener attached, starting processing events.
[DEBUG] 04/09 12:41:09 (blockchain:events:dummy): Emitting event
[DEBUG] 04/09 12:41:09 (blockchain:events:dummy): Emitting event
[DEBUG] 04/09 12:41:09 (blockchain:events:dummy): Emitting event
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[INFO] 04/09 12:41:09 (blockchain:events:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:41:09 (blockchain:events:polling): Received new block number 11
[INFO] 04/09 12:41:09 (blockchain:events:polling): Checking new events between blocks 10-[Function: SubstituteJS] -> number
[DEBUG] 04/09 12:41:09 (blockchain:events:polling): Received events: 
{ '0': [Function: SubstituteJS] -> number }
[DEBUG] 04/09 12:41:09 (blockchain:events:polling): Emitting event
[VERBOSE] 04/09 12:41:09 (blockchain:events:polling): Received new block number 12
[INFO] 04/09 12:41:09 (blockchain:events:polling): Checking new events between blocks 11-[Function: SubstituteJS] -> number
[DEBUG] 04/09 12:41:09 (blockchain:events:polling): Received events: 
{ '0': [Function: SubstituteJS] -> number }
[DEBUG] 04/09 12:41:09 (blockchain:events:polling): Emitting event
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[INFO] 04/09 12:41:09 (blockchain:events:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:41:09 (blockchain:events:polling): Received new block number 11
[INFO] 04/09 12:41:09 (blockchain:events:polling): Checking new events between blocks 10-[Function: SubstituteJS] -> number
[DEBUG] 04/09 12:41:09 (blockchain:events:polling): Received events: 
{ '0': [Function: SubstituteJS] -> number }
[DEBUG] 04/09 12:41:09 (blockchain:events:polling): Emitting event
[VERBOSE] 04/09 12:41:09 (blockchain:events:polling): Received new block number 12
[INFO] 04/09 12:41:09 (blockchain:events:polling): Checking new events between blocks 11-[Function: SubstituteJS] -> number
[DEBUG] 04/09 12:41:09 (blockchain:events:polling): Received events: 
[INFO] 04/09 12:41:09 (blockchain:events:polling): No events to be processed.
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:09 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[INFO] 04/09 12:41:10 (blockchain:events:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:41:10 (blockchain:events:polling): Received new block number 11
[INFO] 04/09 12:41:10 (blockchain:events:polling): Checking new events between blocks 10-[Function: SubstituteJS] -> number
[DEBUG] 04/09 12:41:10 (blockchain:events:polling): Received events: 
{ '0': [Function: SubstituteJS] -> number }
[DEBUG] 04/09 12:41:10 (blockchain:events:polling): Emitting event
[VERBOSE] 04/09 12:41:10 (blockchain:events:polling): Received new block number 11
[VERBOSE] 04/09 12:41:10 (blockchain:events:polling): Nothing new to process
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[INFO] 04/09 12:41:10 (blockchain:events:polling): Listener attached, starting processing events.
[INFO] 04/09 12:41:10 (blockchain:events:polling): => Processing past events from genesis to [Function: SubstituteJS] -> hash
[DEBUG] 04/09 12:41:10 (blockchain:events:polling): Emitting event
[DEBUG] 04/09 12:41:10 (blockchain:events:polling): Emitting event
[DEBUG] 04/09 12:41:10 (blockchain:events:polling): Emitting event
[DEBUG] 04/09 12:41:10 (blockchain:events:polling): Emitting event
[INFO] 04/09 12:41:10 (blockchain:events:polling): => Finished processing past events in 0s
[VERBOSE] 04/09 12:41:10 (blockchain:events:polling): Received new block number 11
[INFO] 04/09 12:41:10 (blockchain:events:polling): Checking new events between blocks [Function: SubstituteJS] -> number-[Function: SubstituteJS] -> number
[DEBUG] 04/09 12:41:10 (blockchain:events:polling): Received events: 
{ '0': [Function: SubstituteJS] -> number,
  '1': [Function: SubstituteJS] -> number,
  '2': [Function: SubstituteJS] -> number,
  '3': [Function: SubstituteJS] -> number }
[DEBUG] 04/09 12:41:10 (blockchain:events:polling): Emitting event
[DEBUG] 04/09 12:41:10 (blockchain:events:polling): Emitting event
[DEBUG] 04/09 12:41:10 (blockchain:events:polling): Emitting event
[DEBUG] 04/09 12:41:10 (blockchain:events:polling): Emitting event
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:10 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `targetConfirmation`,
    `contractAddress`,
    `event`,
    `content`,
    `emitted`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (
    NULL,
    7,
    '1',
    3,
    '0x123',
    'testEvent',
    '{"event": "testEvent", "blockNumber": 7, "blockHash": "0x123"}',
    1,
    '2020-09-04 09:41:11.064 +00:00',
    '2020-09-04 09:41:11.064 +00:00'
  ),(
    NULL,
    8,
    '2',
    4,
    '0x123',
    'testEvent',
    '{"event": "testEvent", "blockNumber": 8, "blockHash": "0x123"}',
    0,
    '2020-09-04 09:41:11.064 +00:00',
    '2020-09-04 09:41:11.064 +00:00'
  ),(
    NULL,
    9,
    '3',
    2,
    '0x666',
    'niceEvent',
    '{"event": "niceEvent", "blockNumber": 9, "blockHash": "0x123"}',
    0,
    '2020-09-04 09:41:11.064 +00:00',
    '2020-09-04 09:41:11.064 +00:00'
  );
[INFO] 04/09 12:41:11 (blockchain:events:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:41:11 (blockchain:events:polling): Received new block number 11
[WARN] 04/09 12:41:11 (blockchain:events:polling): Reorg happening! Old hash: 0x123; New hash: 0x321
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DELETE FROM
  `event`
WHERE
  `contractAddress` = '0x123'
[VERBOSE] 04/09 12:41:11 (blockchain:events:polling): Threshold block 10
[INFO] 04/09 12:41:11 (blockchain:events:polling): 1 events to be confirmed.
[DEBUG] 04/09 12:41:11 (blockchain:events:polling): New testEvent event to be confirmed. Transaction 1.1
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `logIndex`,
    `targetConfirmation`,
    `contractAddress`,
    `event`,
    `emitted`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (
    NULL,
    11,
    '1',
    1,
    1,
    '0x123',
    'testEvent',
    0,
    '2020-09-04 09:41:11.083 +00:00',
    '2020-09-04 09:41:11.083 +00:00'
  );
[INFO] 04/09 12:41:11 (blockchain:events:polling): 0 events to be emitted.
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
SELECT
  count(*) AS `count`
FROM
  `event` AS `Event`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[INFO] 04/09 12:41:11 (blockchain:events:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:41:11 (blockchain:events:polling): Received new block number 11
[WARN] 04/09 12:41:11 (blockchain:events:polling): Reorg happening! Old hash: 0x123; New hash: 0x321
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DELETE FROM
  `event`
WHERE
  `contractAddress` = '0x123'
[VERBOSE] 04/09 12:41:11 (blockchain:events:polling): Threshold block 10
[INFO] 04/09 12:41:11 (blockchain:events:polling): 1 events to be confirmed.
[DEBUG] 04/09 12:41:11 (blockchain:events:polling): New testEvent event to be confirmed. Transaction 1.1
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `logIndex`,
    `targetConfirmation`,
    `contractAddress`,
    `event`,
    `emitted`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (
    NULL,
    11,
    '1',
    1,
    1,
    '0x123',
    'testEvent',
    0,
    '2020-09-04 09:41:11.415 +00:00',
    '2020-09-04 09:41:11.415 +00:00'
  );
[INFO] 04/09 12:41:11 (blockchain:events:polling): 0 events to be emitted.
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
SELECT
  count(*) AS `count`
FROM
  `event` AS `Event`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[INFO] 04/09 12:41:11 (blockchain:events:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:41:11 (blockchain:events:polling): Received new block number 11
[WARN] 04/09 12:41:11 (blockchain:events:polling): Reorg happening! Old hash: 0x123; New hash: 0x321
[ERROR] 04/09 12:41:11 (blockchain:events:polling): Reorg out of confirmation range! Old hash: 0x222; New hash: 0x33
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
DELETE FROM
  `event`
WHERE
  `contractAddress` = '0x123'
[VERBOSE] 04/09 12:41:11 (blockchain:events:polling): Threshold block 10
[INFO] 04/09 12:41:11 (blockchain:events:polling): 1 events to be confirmed.
[DEBUG] 04/09 12:41:11 (blockchain:events:polling): New testEvent event to be confirmed. Transaction 1.1
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `logIndex`,
    `targetConfirmation`,
    `contractAddress`,
    `event`,
    `emitted`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (
    NULL,
    11,
    '1',
    1,
    1,
    '0x123',
    'testEvent',
    0,
    '2020-09-04 09:41:11.753 +00:00',
    '2020-09-04 09:41:11.753 +00:00'
  );
[INFO] 04/09 12:41:11 (blockchain:events:polling): 0 events to be emitted.
[DEBUG] 04/09 12:41:11 (db): Executing SQL (default):
SELECT
  count(*) AS `count`
FROM
  `event` AS `Event`;
[INFO] 04/09 12:41:11 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:41:11 (blockchain:block-emitter:polling): New block with number 111 with hash 0x123
[INFO] 04/09 12:41:11 (blockchain:block-emitter:polling): Listener removing, stopping processing events.
[INFO] 04/09 12:41:11 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:41:11 (blockchain:block-emitter:polling): New block with number 10 with hash 0x123
[VERBOSE] 04/09 12:41:12 (blockchain:block-emitter:polling): New block with number 11 with hash 0x123
[INFO] 04/09 12:41:12 (blockchain:block-emitter:polling): Listener removing, stopping processing events.
[INFO] 04/09 12:41:12 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:41:12 (blockchain:block-emitter:polling): New block with number 10 with hash 0x123
[INFO] 04/09 12:41:12 (blockchain:block-emitter:polling): Listener removing, stopping processing events.
[INFO] 04/09 12:41:12 (blockchain:block-emitter:listening): Listener attached, starting processing events.
[VERBOSE] 04/09 12:41:12 (blockchain:block-emitter:listening): Current block with number 10 with hash 0x123
[INFO] 04/09 12:41:12 (blockchain:block-emitter:listening): Listener attached, starting processing events.
[VERBOSE] 04/09 12:41:12 (blockchain:block-emitter:listening): Current block with number 9 with hash 0x123
[VERBOSE] 04/09 12:41:12 (blockchain:block-emitter:listening): New block with number 9 with hash 0x123
[VERBOSE] 04/09 12:41:12 (blockchain:block-emitter:listening): New block with number 9 with hash 0x123
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `data-store` (
  `key` VARCHAR(255) PRIMARY KEY,
  `value` VARCHAR(255)
);
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`data-store`)
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_data-store_1`)
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
SELECT
  `key`,
  `value`
FROM
  `data-store` AS `sequelizeStore-dbstore`;
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
INSERT INTO
  `rates` (
    `token`,
    `usd`,
    `eur`,
    `btc`,
    `ars`,
    `cny`,
    `krw`,
    `jpy`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  ($ 1, $ 2, $ 3, $ 4, $ 5, $ 6, $ 7, $ 8, $ 9, $ 10);
[DEBUG] 04/09 12:41:12 (db): Executing SQL (default):
SELECT
  `token`,
  `usd`,
  `eur`,
  `btc`,
  `ars`,
  `cny`,
  `krw`,
  `jpy`,
  `createdAt`,
  `updatedAt`
FROM
  `rates` AS `Rate`
WHERE
  `Rate`.`token` = 123456789012345;
[INFO] 04/09 12:41:14 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:41:14 (blockchain:block-emitter:polling): New block with number undefined with hash undefined
[WARN] 04/09 12:41:15 (cli:start): Reorg detected outside of confirmation range. Rebuilding the service's state!
[INFO] 04/09 12:41:15 (cli:start): Stopping service
[DEBUG] 04/09 12:41:15 (rates:updater): Acquiring lock for update
[INFO] 04/09 12:41:15 (rates:updater): Updating rates using coingecko provider.
[DEBUG] 04/09 12:41:16 (db): Executing SQL (4c2682a0-b8b3-4086-9099-cd852f6d298e):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 04/09 12:41:16 (db): Executing SQL (4c2682a0-b8b3-4086-9099-cd852f6d298e):
SELECT
  `token`,
  `usd`,
  `eur`,
  `btc`,
  `ars`,
  `cny`,
  `krw`,
  `jpy`,
  `createdAt`,
  `updatedAt`
FROM
  `rates` AS `Rate`
WHERE
  `Rate`.`token` = 'rif';
[DEBUG] 04/09 12:41:16 (db): Executing SQL (4c2682a0-b8b3-4086-9099-cd852f6d298e):
INSERT INTO
  `rates` (`token`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:41:16 (db): Executing SQL (4c2682a0-b8b3-4086-9099-cd852f6d298e):
COMMIT;
[DEBUG] 04/09 12:41:16 (db): Executing SQL (default):
UPDATE
  `rates`
SET
  `usd` = $ 1,
  `eur` = $ 2,
  `btc` = $ 3,
  `ars` = $ 4,
  `cny` = $ 5,
  `krw` = $ 6,
  `jpy` = $ 7,
  `updatedAt` = $ 8
WHERE
  `token` = $ 9
[DEBUG] 04/09 12:41:16 (db): Executing SQL (180ed565-97de-43fa-830a-d103d7f3b312):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 04/09 12:41:16 (db): Executing SQL (180ed565-97de-43fa-830a-d103d7f3b312):
SELECT
  `token`,
  `usd`,
  `eur`,
  `btc`,
  `ars`,
  `cny`,
  `krw`,
  `jpy`,
  `createdAt`,
  `updatedAt`
FROM
  `rates` AS `Rate`
WHERE
  `Rate`.`token` = 'rbtc';
[DEBUG] 04/09 12:41:16 (db): Executing SQL (180ed565-97de-43fa-830a-d103d7f3b312):
INSERT INTO
  `rates` (`token`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:41:16 (db): Executing SQL (180ed565-97de-43fa-830a-d103d7f3b312):
COMMIT;
[DEBUG] 04/09 12:41:16 (db): Executing SQL (default):
UPDATE
  `rates`
SET
  `usd` = $ 1,
  `eur` = $ 2,
  `btc` = $ 3,
  `ars` = $ 4,
  `cny` = $ 5,
  `krw` = $ 6,
  `jpy` = $ 7,
  `updatedAt` = $ 8
WHERE
  `token` = $ 9
[INFO] 04/09 12:41:16 (cli:start): Restarting the app
[DEBUG] 04/09 12:41:18 (db): Executing SQL (default):
SELECT
  `token`,
  `usd`,
  `eur`,
  `btc`,
  `ars`,
  `cny`,
  `krw`,
  `jpy`,
  `createdAt`,
  `updatedAt`
FROM
  `rates` AS `Rate`
WHERE
  `Rate`.`token` = '123456789012345';
[INFO] 04/09 12:41:20 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:41:20 (blockchain:block-emitter:polling): New block with number 10 with hash 0x123
[INFO] 04/09 12:41:20 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:41:20 (blockchain:block-emitter:polling): New block with number 10 with hash 0x123
[INFO] 04/09 12:41:20 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:41:20 (blockchain:block-emitter:polling): New block with number 10 with hash 0x123
[INFO] 04/09 12:41:21 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 04/09 12:41:21 (blockchain:block-emitter:polling): New block with number 10 with hash 0x123
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (72ae7871-5de8-4d33-aa84-c2c0016c455b):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (72ae7871-5de8-4d33-aa84-c2c0016c455b):
SELECT
  `Offer`.`provider`,
  `Offer`.`totalCapacity`,
  `Offer`.`peerId`,
  `Offer`.`createdAt`,
  `Offer`.`updatedAt`,
  `plans`.`id` AS `plans.id`,
  `plans`.`period` AS `plans.period`,
  `plans`.`price` AS `plans.price`,
  `plans`.`offerId` AS `plans.offerId`,
  `plans`.`createdAt` AS `plans.createdAt`,
  `plans`.`updatedAt` AS `plans.updatedAt`
FROM
  `storage_offer` AS `Offer`
  LEFT OUTER JOIN `storage_billing-plan` AS `plans` ON `Offer`.`provider` = `plans`.`offerId`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 04/09 12:41:22 (db): Executing SQL (72ae7871-5de8-4d33-aa84-c2c0016c455b):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (72ae7871-5de8-4d33-aa84-c2c0016c455b):
COMMIT;
[INFO] 04/09 12:41:22 (storage:handler:offer): Created new StorageOffer for TestAddress
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
SELECT
  `provider`,
  `totalCapacity`,
  `peerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_offer` AS `Offer`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (1321a3ac-cbcb-4d12-8f57-d41470652471):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (1321a3ac-cbcb-4d12-8f57-d41470652471):
SELECT
  `Offer`.`provider`,
  `Offer`.`totalCapacity`,
  `Offer`.`peerId`,
  `Offer`.`createdAt`,
  `Offer`.`updatedAt`,
  `plans`.`id` AS `plans.id`,
  `plans`.`period` AS `plans.period`,
  `plans`.`price` AS `plans.price`,
  `plans`.`offerId` AS `plans.offerId`,
  `plans`.`createdAt` AS `plans.createdAt`,
  `plans`.`updatedAt` AS `plans.updatedAt`
FROM
  `storage_offer` AS `Offer`
  LEFT OUTER JOIN `storage_billing-plan` AS `plans` ON `Offer`.`provider` = `plans`.`offerId`
WHERE
  `Offer`.`provider` = 'test';
[DEBUG] 04/09 12:41:22 (db): Executing SQL (1321a3ac-cbcb-4d12-8f57-d41470652471):
COMMIT;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
UPDATE
  `storage_offer`
SET
  `totalCapacity` = $ 1,
  `updatedAt` = $ 2
WHERE
  `provider` = $ 3
[INFO] 04/09 12:41:22 (storage:handler:offer): Updating capacity 1000 (ID: test)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (591119fb-2089-4657-9294-a085c5c0b76e):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (591119fb-2089-4657-9294-a085c5c0b76e):
SELECT
  `Offer`.`provider`,
  `Offer`.`totalCapacity`,
  `Offer`.`peerId`,
  `Offer`.`createdAt`,
  `Offer`.`updatedAt`,
  `plans`.`id` AS `plans.id`,
  `plans`.`period` AS `plans.period`,
  `plans`.`price` AS `plans.price`,
  `plans`.`offerId` AS `plans.offerId`,
  `plans`.`createdAt` AS `plans.createdAt`,
  `plans`.`updatedAt` AS `plans.updatedAt`
FROM
  `storage_offer` AS `Offer`
  LEFT OUTER JOIN `storage_billing-plan` AS `plans` ON `Offer`.`provider` = `plans`.`offerId`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 04/09 12:41:22 (db): Executing SQL (591119fb-2089-4657-9294-a085c5c0b76e):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (591119fb-2089-4657-9294-a085c5c0b76e):
COMMIT;
[INFO] 04/09 12:41:22 (storage:handler:offer): Created new StorageOffer for TestAddress
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
UPDATE
  `storage_offer`
SET
  `totalCapacity` = $ 1,
  `updatedAt` = $ 2
WHERE
  `provider` = $ 3
[INFO] 04/09 12:41:22 (storage:handler:offer): Updating capacity 1000 (ID: TestAddress)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
SELECT
  `provider`,
  `totalCapacity`,
  `peerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_offer` AS `Offer`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:22 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (fa64758a-8069-4c55-a82f-cd2dacf9b57b):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (fa64758a-8069-4c55-a82f-cd2dacf9b57b):
SELECT
  `Offer`.`provider`,
  `Offer`.`totalCapacity`,
  `Offer`.`peerId`,
  `Offer`.`createdAt`,
  `Offer`.`updatedAt`,
  `plans`.`id` AS `plans.id`,
  `plans`.`period` AS `plans.period`,
  `plans`.`price` AS `plans.price`,
  `plans`.`offerId` AS `plans.offerId`,
  `plans`.`createdAt` AS `plans.createdAt`,
  `plans`.`updatedAt` AS `plans.updatedAt`
FROM
  `storage_offer` AS `Offer`
  LEFT OUTER JOIN `storage_billing-plan` AS `plans` ON `Offer`.`provider` = `plans`.`offerId`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 04/09 12:41:23 (db): Executing SQL (fa64758a-8069-4c55-a82f-cd2dacf9b57b):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (fa64758a-8069-4c55-a82f-cd2dacf9b57b):
COMMIT;
[INFO] 04/09 12:41:23 (storage:handler:offer): Created new StorageOffer for TestAddress
[INFO] 04/09 12:41:23 (storage:handler:offer): Updating period 69696 to price 1000 (ID: TestAddress)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
SELECT
  `provider`,
  `totalCapacity`,
  `peerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_offer` AS `Offer`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
SELECT
  `id`,
  `period`,
  `price`,
  `offerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_billing-plan` AS `BillingPlan`
WHERE
  `BillingPlan`.`offerId` = 'TestAddress'
LIMIT
  1;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (72fe6bd1-3ded-450e-b97b-5885e0e25a8b):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (72fe6bd1-3ded-450e-b97b-5885e0e25a8b):
SELECT
  `Offer`.`provider`,
  `Offer`.`totalCapacity`,
  `Offer`.`peerId`,
  `Offer`.`createdAt`,
  `Offer`.`updatedAt`,
  `plans`.`id` AS `plans.id`,
  `plans`.`period` AS `plans.period`,
  `plans`.`price` AS `plans.price`,
  `plans`.`offerId` AS `plans.offerId`,
  `plans`.`createdAt` AS `plans.createdAt`,
  `plans`.`updatedAt` AS `plans.updatedAt`
FROM
  `storage_offer` AS `Offer`
  LEFT OUTER JOIN `storage_billing-plan` AS `plans` ON `Offer`.`provider` = `plans`.`offerId`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 04/09 12:41:23 (db): Executing SQL (72fe6bd1-3ded-450e-b97b-5885e0e25a8b):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (72fe6bd1-3ded-450e-b97b-5885e0e25a8b):
COMMIT;
[INFO] 04/09 12:41:23 (storage:handler:offer): Created new StorageOffer for TestAddress
[INFO] 04/09 12:41:23 (storage:handler:offer): Updating period 99 to price 1000 (ID: TestAddress)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
SELECT
  `provider`,
  `totalCapacity`,
  `peerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_offer` AS `Offer`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
SELECT
  `id`,
  `period`,
  `price`,
  `offerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_billing-plan` AS `BillingPlan`
WHERE
  `BillingPlan`.`offerId` = 'TestAddress'
  AND `BillingPlan`.`period` = '99'
LIMIT
  1;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (b223fe67-1b7e-486e-bbf5-d6192ece6476):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (b223fe67-1b7e-486e-bbf5-d6192ece6476):
SELECT
  `Offer`.`provider`,
  `Offer`.`totalCapacity`,
  `Offer`.`peerId`,
  `Offer`.`createdAt`,
  `Offer`.`updatedAt`,
  `plans`.`id` AS `plans.id`,
  `plans`.`period` AS `plans.period`,
  `plans`.`price` AS `plans.price`,
  `plans`.`offerId` AS `plans.offerId`,
  `plans`.`createdAt` AS `plans.createdAt`,
  `plans`.`updatedAt` AS `plans.updatedAt`
FROM
  `storage_offer` AS `Offer`
  LEFT OUTER JOIN `storage_billing-plan` AS `plans` ON `Offer`.`provider` = `plans`.`offerId`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 04/09 12:41:23 (db): Executing SQL (b223fe67-1b7e-486e-bbf5-d6192ece6476):
COMMIT;
[INFO] 04/09 12:41:23 (storage:handler:offer): Updating period 99 to price 99999 (ID: TestAddress)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
UPDATE
  `storage_billing-plan`
SET
  `price` = $ 1,
  `updatedAt` = $ 2
WHERE
  `id` = $ 3
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
SELECT
  `provider`,
  `totalCapacity`,
  `peerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_offer` AS `Offer`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
SELECT
  `id`,
  `period`,
  `price`,
  `offerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_billing-plan` AS `BillingPlan`
WHERE
  `BillingPlan`.`offerId` = 'TestAddress'
  AND `BillingPlan`.`period` = '99'
LIMIT
  1;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (d1b68bb4-0d61-4311-afe8-fe8292b0c18a):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (d1b68bb4-0d61-4311-afe8-fe8292b0c18a):
SELECT
  `Offer`.`provider`,
  `Offer`.`totalCapacity`,
  `Offer`.`peerId`,
  `Offer`.`createdAt`,
  `Offer`.`updatedAt`,
  `plans`.`id` AS `plans.id`,
  `plans`.`period` AS `plans.period`,
  `plans`.`price` AS `plans.price`,
  `plans`.`offerId` AS `plans.offerId`,
  `plans`.`createdAt` AS `plans.createdAt`,
  `plans`.`updatedAt` AS `plans.updatedAt`
FROM
  `storage_offer` AS `Offer`
  LEFT OUTER JOIN `storage_billing-plan` AS `plans` ON `Offer`.`provider` = `plans`.`offerId`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 04/09 12:41:23 (db): Executing SQL (d1b68bb4-0d61-4311-afe8-fe8292b0c18a):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (d1b68bb4-0d61-4311-afe8-fe8292b0c18a):
COMMIT;
[INFO] 04/09 12:41:23 (storage:handler:offer): Created new StorageOffer for TestAddress
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
SELECT
  `provider`,
  `totalCapacity`,
  `peerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_offer` AS `Offer`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (ae4feea5-fdfb-44b8-bcb1-43bdb3e61cde):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (ae4feea5-fdfb-44b8-bcb1-43bdb3e61cde):
SELECT
  `Offer`.`provider`,
  `Offer`.`totalCapacity`,
  `Offer`.`peerId`,
  `Offer`.`createdAt`,
  `Offer`.`updatedAt`,
  `plans`.`id` AS `plans.id`,
  `plans`.`period` AS `plans.period`,
  `plans`.`price` AS `plans.price`,
  `plans`.`offerId` AS `plans.offerId`,
  `plans`.`createdAt` AS `plans.createdAt`,
  `plans`.`updatedAt` AS `plans.updatedAt`
FROM
  `storage_offer` AS `Offer`
  LEFT OUTER JOIN `storage_billing-plan` AS `plans` ON `Offer`.`provider` = `plans`.`offerId`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 04/09 12:41:23 (db): Executing SQL (ae4feea5-fdfb-44b8-bcb1-43bdb3e61cde):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (ae4feea5-fdfb-44b8-bcb1-43bdb3e61cde):
COMMIT;
[INFO] 04/09 12:41:23 (storage:handler:offer): Created new StorageOffer for TestAddress
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (a564ca14-faf5-4dcd-aa6e-2f7e6943d6b5):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (a564ca14-faf5-4dcd-aa6e-2f7e6943d6b5):
SELECT
  `Offer`.`provider`,
  `Offer`.`totalCapacity`,
  `Offer`.`peerId`,
  `Offer`.`createdAt`,
  `Offer`.`updatedAt`,
  `plans`.`id` AS `plans.id`,
  `plans`.`period` AS `plans.period`,
  `plans`.`price` AS `plans.price`,
  `plans`.`offerId` AS `plans.offerId`,
  `plans`.`createdAt` AS `plans.createdAt`,
  `plans`.`updatedAt` AS `plans.updatedAt`
FROM
  `storage_offer` AS `Offer`
  LEFT OUTER JOIN `storage_billing-plan` AS `plans` ON `Offer`.`provider` = `plans`.`offerId`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 04/09 12:41:23 (db): Executing SQL (a564ca14-faf5-4dcd-aa6e-2f7e6943d6b5):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (a564ca14-faf5-4dcd-aa6e-2f7e6943d6b5):
COMMIT;
[INFO] 04/09 12:41:23 (storage:handler:offer): Created new StorageOffer for TestAddress
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
UPDATE
  `storage_offer`
SET
  `peerId` = $ 1,
  `updatedAt` = $ 2
WHERE
  `provider` = $ 3
[INFO] 04/09 12:41:23 (storage:handler:offer): PeerId FakePeerId defined (ID: TestAddress)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
SELECT
  `provider`,
  `totalCapacity`,
  `peerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_offer` AS `Offer`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DELETE FROM
  `storage_billing-plan`
WHERE
  `offerId` = 'TestAddress'
  AND `period` = '99'
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
SELECT
  `id`,
  `period`,
  `price`,
  `offerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_billing-plan` AS `BillingPlan`
WHERE
  `BillingPlan`.`offerId` = 'TestAddress'
  AND `BillingPlan`.`period` = 99
LIMIT
  1;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
SELECT
  `id`,
  `period`,
  `price`,
  `offerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_billing-plan` AS `BillingPlan`
WHERE
  `BillingPlan`.`offerId` = 'TestAddress'
  AND `BillingPlan`.`period` = 99
LIMIT
  1;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
INSERT
  OR IGNORE INTO `storage_agreement` (
    `agreementReference`,
    `dataReference`,
    `consumer`,
    `size`,
    `isActive`,
    `billingPeriod`,
    `billingPrice`,
    `availableFunds`,
    `lastPayout`,
    `offerId`
  )
VALUES
  (
    '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2',
    'Reference1Reference2',
    '0x41677265656d656e7443726561746f72',
    '100',
    1,
    '99',
    '100',
    '100',
    '52647-01-10 17:54:58.000 +00:00',
    'TestAddress'
  );
UPDATE
  `storage_agreement`
SET
  `agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2',
  `dataReference` = 'Reference1Reference2',
  `consumer` = '0x41677265656d656e7443726561746f72',
  `offerId` = 'TestAddress',
  `size` = '100',
  `billingPeriod` = '99',
  `billingPrice` = '100',
  `availableFunds` = '100',
  `lastPayout` = '52647-01-10 17:54:58.000 +00:00'
WHERE
  (
    `agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2'
  )
[INFO] 04/09 12:41:23 (storage:handler:request): Created new Agreement with ID 0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2 for offer TestAddress
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2'
  AND `Agreement`.`offerId` = 'TestAddress';
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:23 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2';
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
INSERT INTO
  `storage_agreement` (
    `agreementReference`,
    `dataReference`,
    `consumer`,
    `size`,
    `isActive`,
    `billingPeriod`,
    `billingPrice`,
    `availableFunds`,
    `lastPayout`,
    `offerId`
  )
VALUES
  ($ 1, $ 2, $ 3, $ 4, $ 5, $ 6, $ 7, $ 8, $ 9, $ 10);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2';
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
UPDATE
  `storage_agreement`
SET
  `isActive` = $ 1
WHERE
  `agreementReference` = $ 2
[INFO] 04/09 12:41:24 (storage:handler:request): Agreement 0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2 was stopped.
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2'
  AND `Agreement`.`offerId` = 'TestAddress';
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2';
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
INSERT INTO
  `storage_agreement` (
    `agreementReference`,
    `dataReference`,
    `consumer`,
    `size`,
    `isActive`,
    `billingPeriod`,
    `billingPrice`,
    `availableFunds`,
    `lastPayout`,
    `offerId`
  )
VALUES
  ($ 1, $ 2, $ 3, $ 4, $ 5, $ 6, $ 7, $ 8, $ 9, $ 10);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2';
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
UPDATE
  `storage_agreement`
SET
  `availableFunds` = $ 1
WHERE
  `agreementReference` = $ 2
[INFO] 04/09 12:41:24 (storage:handler:request): Agreement 0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2 was topped up with 50.
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2'
  AND `Agreement`.`offerId` = 'TestAddress';
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2';
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
INSERT INTO
  `storage_agreement` (
    `agreementReference`,
    `dataReference`,
    `consumer`,
    `size`,
    `isActive`,
    `billingPeriod`,
    `billingPrice`,
    `availableFunds`,
    `lastPayout`,
    `offerId`
  )
VALUES
  ($ 1, $ 2, $ 3, $ 4, $ 5, $ 6, $ 7, $ 8, $ 9, $ 10);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2';
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
UPDATE
  `storage_agreement`
SET
  `availableFunds` = $ 1
WHERE
  `agreementReference` = $ 2
[INFO] 04/09 12:41:24 (storage:handler:request): 50 was withdrawn from funds of Agreement 0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2.
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2'
  AND `Agreement`.`offerId` = 'TestAddress';
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2';
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
INSERT INTO
  `storage_agreement` (
    `agreementReference`,
    `dataReference`,
    `consumer`,
    `size`,
    `isActive`,
    `billingPeriod`,
    `billingPrice`,
    `availableFunds`,
    `lastPayout`,
    `offerId`
  )
VALUES
  ($ 1, $ 2, $ 3, $ 4, $ 5, $ 6, $ 7, $ 8, $ 9, $ 10);
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2';
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
UPDATE
  `storage_agreement`
SET
  `availableFunds` = $ 1
WHERE
  `agreementReference` = $ 2
[INFO] 04/09 12:41:24 (storage:handler:request): 50 was payed out from funds of Agreement 0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2.
[DEBUG] 04/09 12:41:24 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2'
  AND `Agreement`.`offerId` = 'TestAddress';
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `data-store` (
  `key` VARCHAR(255) PRIMARY KEY,
  `value` VARCHAR(255)
);
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`data-store`)
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_data-store_1`)
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
SELECT
  `key`,
  `value`
FROM
  `data-store` AS `sequelizeStore-dbstore`;
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
INSERT INTO
  `rates` (
    `token`,
    `usd`,
    `eur`,
    `btc`,
    `ars`,
    `cny`,
    `krw`,
    `jpy`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  ($ 1, $ 2, $ 3, $ 4, $ 5, $ 6, $ 7, $ 8, $ 9, $ 10);
[DEBUG] 07/09 02:23:15 (db): Executing SQL (default):
SELECT
  `token`,
  `usd`,
  `eur`,
  `btc`,
  `ars`,
  `cny`,
  `krw`,
  `jpy`,
  `createdAt`,
  `updatedAt`
FROM
  `rates` AS `Rate`
WHERE
  `Rate`.`token` = 123456789012345;
[INFO] 07/09 02:23:16 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 07/09 02:23:16 (blockchain:block-emitter:polling): New block with number undefined with hash undefined
[WARN] 07/09 02:23:18 (cli:start): Reorg detected outside of confirmation range. Rebuilding the service's state!
[INFO] 07/09 02:23:18 (cli:start): Stopping service
[DEBUG] 07/09 02:23:18 (rates:updater): Acquiring lock for update
[INFO] 07/09 02:23:18 (rates:updater): Updating rates using coingecko provider.
[DEBUG] 07/09 02:23:18 (db): Executing SQL (9f74ebf9-2111-4cc4-bc8b-132de0715274):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 07/09 02:23:18 (db): Executing SQL (9f74ebf9-2111-4cc4-bc8b-132de0715274):
SELECT
  `token`,
  `usd`,
  `eur`,
  `btc`,
  `ars`,
  `cny`,
  `krw`,
  `jpy`,
  `createdAt`,
  `updatedAt`
FROM
  `rates` AS `Rate`
WHERE
  `Rate`.`token` = 'rif';
[DEBUG] 07/09 02:23:18 (db): Executing SQL (9f74ebf9-2111-4cc4-bc8b-132de0715274):
INSERT INTO
  `rates` (`token`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 07/09 02:23:18 (db): Executing SQL (9f74ebf9-2111-4cc4-bc8b-132de0715274):
COMMIT;
[DEBUG] 07/09 02:23:18 (db): Executing SQL (default):
UPDATE
  `rates`
SET
  `usd` = $ 1,
  `eur` = $ 2,
  `btc` = $ 3,
  `ars` = $ 4,
  `cny` = $ 5,
  `krw` = $ 6,
  `jpy` = $ 7,
  `updatedAt` = $ 8
WHERE
  `token` = $ 9
[DEBUG] 07/09 02:23:18 (db): Executing SQL (8c0ee8b8-8d93-4172-8e2b-3daf2d671f57):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 07/09 02:23:18 (db): Executing SQL (8c0ee8b8-8d93-4172-8e2b-3daf2d671f57):
SELECT
  `token`,
  `usd`,
  `eur`,
  `btc`,
  `ars`,
  `cny`,
  `krw`,
  `jpy`,
  `createdAt`,
  `updatedAt`
FROM
  `rates` AS `Rate`
WHERE
  `Rate`.`token` = 'rbtc';
[DEBUG] 07/09 02:23:18 (db): Executing SQL (8c0ee8b8-8d93-4172-8e2b-3daf2d671f57):
INSERT INTO
  `rates` (`token`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 07/09 02:23:18 (db): Executing SQL (8c0ee8b8-8d93-4172-8e2b-3daf2d671f57):
COMMIT;
[DEBUG] 07/09 02:23:18 (db): Executing SQL (default):
UPDATE
  `rates`
SET
  `usd` = $ 1,
  `eur` = $ 2,
  `btc` = $ 3,
  `ars` = $ 4,
  `cny` = $ 5,
  `krw` = $ 6,
  `jpy` = $ 7,
  `updatedAt` = $ 8
WHERE
  `token` = $ 9
[INFO] 07/09 02:23:18 (cli:start): Restarting the app
[DEBUG] 07/09 02:23:21 (db): Executing SQL (default):
SELECT
  `token`,
  `usd`,
  `eur`,
  `btc`,
  `ars`,
  `cny`,
  `krw`,
  `jpy`,
  `createdAt`,
  `updatedAt`
FROM
  `rates` AS `Rate`
WHERE
  `Rate`.`token` = '123456789012345';
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `targetConfirmation`,
    `contractAddress`,
    `event`,
    `content`,
    `emitted`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (
    NULL,
    7,
    '1',
    3,
    '0x123',
    'testEvent',
    '{"event": "testEvent", "blockNumber": 7, "blockHash": "0x123"}',
    1,
    '2020-09-07 11:29:31.279 +00:00',
    '2020-09-07 11:29:31.279 +00:00'
  ),(
    NULL,
    8,
    '2',
    4,
    '0x123',
    'testEvent',
    '{"event": "testEvent", "blockNumber": 8, "blockHash": "0x123"}',
    0,
    '2020-09-07 11:29:31.279 +00:00',
    '2020-09-07 11:29:31.279 +00:00'
  ),(
    NULL,
    9,
    '3',
    2,
    '0x123',
    'niceEvent',
    '{"event": "niceEvent", "blockNumber": 9, "blockHash": "0x123"}',
    0,
    '2020-09-07 11:29:31.279 +00:00',
    '2020-09-07 11:29:31.279 +00:00'
  ),(
    NULL,
    9,
    '3',
    2,
    '0x123',
    'otherEvent',
    '{"event": "otherEvent", "blockNumber": 9, "blockHash": "0x123"}',
    0,
    '2020-09-07 11:29:31.279 +00:00',
    '2020-09-07 11:29:31.279 +00:00'
  ),(
    NULL,
    9,
    '4',
    2,
    '0x123',
    'completelyDifferentEvent',
    '{"event": "completelyDifferentEvent", "blockNumber": 9, "blockHash": "0x123"}',
    1,
    '2020-09-07 11:29:31.279 +00:00',
    '2020-09-07 11:29:31.279 +00:00'
  );
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
SELECT
  `id`,
  `blockNumber`,
  `transactionHash`,
  `logIndex`,
  `targetConfirmation`,
  `contractAddress`,
  `event`,
  `content`,
  `emitted`,
  `createdAt`,
  `updatedAt`
FROM
  `event` AS `Event`
WHERE
  `Event`.`contractAddress` = '0x123'
  AND `Event`.`emitted` = 0;
[DEBUG] 07/09 02:29:31 (blockchain:confirmator): Confirming event
{ event: 'niceEvent', blockNumber: 9, blockHash: '0x123' }
[DEBUG] 07/09 02:29:31 (blockchain:confirmator): Confirming event
{ event: 'otherEvent', blockNumber: 9, blockHash: '0x123' }
[INFO] 07/09 02:29:31 (blockchain:confirmator): Confirmed 2 events.
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
UPDATE
  `event`
SET
  `emitted` = $ 1,
  `updatedAt` = $ 2
WHERE
  `id` IN (3, 4)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DELETE FROM
  `event`
WHERE
  `emitted` = 1
  AND `contractAddress` = '0x123'
  AND `blockNumber` <= 1 - `targetConfirmation`
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
SELECT
  count(*) AS `count`
FROM
  `event` AS `Event`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `targetConfirmation`,
    `contractAddress`,
    `event`,
    `content`,
    `emitted`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (
    NULL,
    9,
    '3',
    2,
    '0x123',
    'niceEvent',
    '{"event": "niceEvent", "blockNumber": 9, "blockHash": "0x123"}',
    0,
    '2020-09-07 11:29:31.447 +00:00',
    '2020-09-07 11:29:31.447 +00:00'
  ),(
    NULL,
    8,
    '2',
    2,
    '0x123',
    'otherEvent',
    '{"event": "otherEvent", "blockNumber": 8, "blockHash": "0x123"}',
    0,
    '2020-09-07 11:29:31.447 +00:00',
    '2020-09-07 11:29:31.447 +00:00'
  );
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
SELECT
  `id`,
  `blockNumber`,
  `transactionHash`,
  `logIndex`,
  `targetConfirmation`,
  `contractAddress`,
  `event`,
  `content`,
  `emitted`,
  `createdAt`,
  `updatedAt`
FROM
  `event` AS `Event`
WHERE
  `Event`.`contractAddress` = '0x123'
  AND `Event`.`emitted` = 0;
[DEBUG] 07/09 02:29:31 (blockchain:confirmator): Confirming event
{ event: 'niceEvent', blockNumber: 9, blockHash: '0x123' }
[DEBUG] 07/09 02:29:31 (blockchain:confirmator): Confirming event
{ event: 'otherEvent', blockNumber: 8, blockHash: '0x123' }
[INFO] 07/09 02:29:31 (blockchain:confirmator): Confirmed 2 events.
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
UPDATE
  `event`
SET
  `emitted` = $ 1,
  `updatedAt` = $ 2
WHERE
  `id` IN (1, 2)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DELETE FROM
  `event`
WHERE
  `emitted` = 1
  AND `contractAddress` = '0x123'
  AND `blockNumber` <= 3 - `targetConfirmation`
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
SELECT
  count(*) AS `count`
FROM
  `event` AS `Event`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `targetConfirmation`,
    `contractAddress`,
    `event`,
    `content`,
    `emitted`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (
    NULL,
    8,
    '2',
    4,
    '0x0',
    'testEvent',
    '{"event": "testEvent", "blockNumber": 8, "blockHash": "0x123"}',
    0,
    '2020-09-07 11:29:31.621 +00:00',
    '2020-09-07 11:29:31.621 +00:00'
  ),(
    NULL,
    8,
    '2',
    4,
    '0x123',
    'testEvent',
    '{"event": "testEvent", "blockNumber": 8, "blockHash": "0x123"}',
    0,
    '2020-09-07 11:29:31.621 +00:00',
    '2020-09-07 11:29:31.621 +00:00'
  ),(
    NULL,
    9,
    '3',
    2,
    '0x123',
    'niceEvent',
    '{"event": "niceEvent", "blockNumber": 9, "blockHash": "0x123"}',
    0,
    '2020-09-07 11:29:31.621 +00:00',
    '2020-09-07 11:29:31.621 +00:00'
  ),(
    NULL,
    9,
    '3',
    2,
    '0x0',
    'otherEvent',
    '{"event": "otherEvent", "blockNumber": 9, "blockHash": "0x123"}',
    0,
    '2020-09-07 11:29:31.621 +00:00',
    '2020-09-07 11:29:31.621 +00:00'
  ),(
    NULL,
    9,
    '4',
    2,
    '0x123',
    'completelyDifferentEvent',
    '{"event": "completelyDifferentEvent", "blockNumber": 9, "blockHash": "0x123"}',
    1,
    '2020-09-07 11:29:31.621 +00:00',
    '2020-09-07 11:29:31.621 +00:00'
  );
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
SELECT
  `id`,
  `blockNumber`,
  `transactionHash`,
  `logIndex`,
  `targetConfirmation`,
  `contractAddress`,
  `event`,
  `content`,
  `emitted`,
  `createdAt`,
  `updatedAt`
FROM
  `event` AS `Event`
WHERE
  `Event`.`contractAddress` = '0x123'
  AND `Event`.`emitted` = 0;
[DEBUG] 07/09 02:29:31 (blockchain:confirmator): Confirming event
{ event: 'niceEvent', blockNumber: 9, blockHash: '0x123' }
[INFO] 07/09 02:29:31 (blockchain:confirmator): Confirmed 1 events.
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
UPDATE
  `event`
SET
  `emitted` = $ 1,
  `updatedAt` = $ 2
WHERE
  `id` IN (3)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DELETE FROM
  `event`
WHERE
  `emitted` = 1
  AND `contractAddress` = '0x123'
  AND `blockNumber` <= 1 - `targetConfirmation`
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
SELECT
  count(*) AS `count`
FROM
  `event` AS `Event`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `targetConfirmation`,
    `contractAddress`,
    `event`,
    `emitted`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (
    NULL,
    7,
    '1',
    3,
    '0x123',
    'testEvent',
    1,
    '2020-09-07 11:29:31.795 +00:00',
    '2020-09-07 11:29:31.795 +00:00'
  ),(
    NULL,
    15,
    '3',
    3,
    '0x123',
    'niceEvent',
    1,
    '2020-09-07 11:29:31.795 +00:00',
    '2020-09-07 11:29:31.795 +00:00'
  ),(
    NULL,
    16,
    '3',
    3,
    '0x123',
    'otherEvent',
    1,
    '2020-09-07 11:29:31.795 +00:00',
    '2020-09-07 11:29:31.795 +00:00'
  ),(
    NULL,
    15,
    '4',
    4,
    '0x123',
    'completelyDifferentEvent',
    1,
    '2020-09-07 11:29:31.795 +00:00',
    '2020-09-07 11:29:31.795 +00:00'
  );
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
SELECT
  `id`,
  `blockNumber`,
  `transactionHash`,
  `logIndex`,
  `targetConfirmation`,
  `contractAddress`,
  `event`,
  `content`,
  `emitted`,
  `createdAt`,
  `updatedAt`
FROM
  `event` AS `Event`
WHERE
  `Event`.`contractAddress` = '0x123'
  AND `Event`.`emitted` = 0;
[INFO] 07/09 02:29:31 (blockchain:confirmator): Confirmed 0 events.
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
UPDATE
  `event`
SET
  `emitted` = $ 1,
  `updatedAt` = $ 2
WHERE
  `id` IN (NULL)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DELETE FROM
  `event`
WHERE
  `emitted` = 1
  AND `contractAddress` = '0x123'
  AND `blockNumber` <= 18 - `targetConfirmation`
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
SELECT
  count(*) AS `count`
FROM
  `event` AS `Event`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
SELECT
  `id`,
  `blockNumber`,
  `transactionHash`,
  `logIndex`,
  `targetConfirmation`,
  `contractAddress`,
  `event`,
  `content`,
  `emitted`,
  `createdAt`,
  `updatedAt`
FROM
  `event` AS `Event`
WHERE
  `Event`.`event` = 'testEvent'
  AND `Event`.`blockNumber` = 7
  AND `Event`.`transactionHash` = '1'
LIMIT
  1;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
SELECT
  `id`,
  `blockNumber`,
  `transactionHash`,
  `logIndex`,
  `targetConfirmation`,
  `contractAddress`,
  `event`,
  `content`,
  `emitted`,
  `createdAt`,
  `updatedAt`
FROM
  `event` AS `Event`
WHERE
  `Event`.`event` = 'niceEvent'
  AND `Event`.`blockNumber` = 15
  AND `Event`.`transactionHash` = '3'
LIMIT
  1;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
SELECT
  `id`,
  `blockNumber`,
  `transactionHash`,
  `logIndex`,
  `targetConfirmation`,
  `contractAddress`,
  `event`,
  `content`,
  `emitted`,
  `createdAt`,
  `updatedAt`
FROM
  `event` AS `Event`
WHERE
  `Event`.`event` = 'otherEvent'
  AND `Event`.`blockNumber` = 16
  AND `Event`.`transactionHash` = '3'
LIMIT
  1;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
SELECT
  `id`,
  `blockNumber`,
  `transactionHash`,
  `logIndex`,
  `targetConfirmation`,
  `contractAddress`,
  `event`,
  `content`,
  `emitted`,
  `createdAt`,
  `updatedAt`
FROM
  `event` AS `Event`
WHERE
  `Event`.`event` = 'completelyDifferentEvent'
  AND `Event`.`blockNumber` = 15
  AND `Event`.`transactionHash` = '4'
LIMIT
  1;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `targetConfirmation`,
    `contractAddress`,
    `event`,
    `emitted`,
    `createdAt`,
    `updatedAt`,
    `content`
  )
VALUES
  (
    NULL,
    7,
    '1',
    3,
    '0x123',
    'testEvent',
    1,
    '2020-09-07 11:29:31.892 +00:00',
    '2020-09-07 11:29:31.892 +00:00',
    NULL
  ),(
    NULL,
    7,
    '2',
    3,
    '0x123',
    'testEvent',
    1,
    '2020-09-07 11:29:31.892 +00:00',
    '2020-09-07 11:29:31.892 +00:00',
    NULL
  ),(
    NULL,
    9,
    '3',
    2,
    '0x123',
    'niceEvent',
    0,
    '2020-09-07 11:29:31.892 +00:00',
    '2020-09-07 11:29:31.892 +00:00',
    NULL
  ),(
    NULL,
    9,
    '4',
    2,
    '0x123',
    'otherEvent',
    0,
    '2020-09-07 11:29:31.892 +00:00',
    '2020-09-07 11:29:31.892 +00:00',
    NULL
  ),(
    NULL,
    9,
    '5',
    2,
    '0x123',
    'completelyDifferentEvent',
    0,
    '2020-09-07 11:29:31.892 +00:00',
    '2020-09-07 11:29:31.892 +00:00',
    '{"event": "completelyDifferentEvent", "blockNumber": 9, "blockHash": "0x123"}'
  );
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
SELECT
  `id`,
  `blockNumber`,
  `transactionHash`,
  `logIndex`,
  `targetConfirmation`,
  `contractAddress`,
  `event`,
  `content`,
  `emitted`,
  `createdAt`,
  `updatedAt`
FROM
  `event` AS `Event`
WHERE
  `Event`.`contractAddress` = '0x123'
  AND `Event`.`emitted` = 0;
[WARN] 07/09 02:29:31 (blockchain:confirmator): Event niceEvent of transaction 3 does not have valid receipt!
      Block numbers: 9 (event) vs 10 (receipt) and receipt status: true 
[WARN] 07/09 02:29:31 (blockchain:confirmator): Event otherEvent of transaction 4 does not have valid receipt!
      Block numbers: 9 (event) vs 9 (receipt) and receipt status: false 
[DEBUG] 07/09 02:29:31 (blockchain:confirmator): Confirming event
{ event: 'completelyDifferentEvent',
  blockNumber: 9,
  blockHash: '0x123' }
[INFO] 07/09 02:29:31 (blockchain:confirmator): Confirmed 1 events.
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
UPDATE
  `event`
SET
  `emitted` = $ 1,
  `updatedAt` = $ 2
WHERE
  `id` IN (5)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DELETE FROM
  `event`
WHERE
  `id` IN (3, 4)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DELETE FROM
  `event`
WHERE
  `emitted` = 1
  AND `contractAddress` = '0x123'
  AND `blockNumber` <= 1 - `targetConfirmation`
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
SELECT
  count(*) AS `count`
FROM
  `event` AS `Event`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `targetConfirmation`,
    `contractAddress`,
    `event`,
    `content`,
    `emitted`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (
    NULL,
    7,
    '1',
    3,
    '0x666',
    'testEvent',
    '{"event": "testEvent", "blockNumber": 7, "blockHash": "0x123"}',
    1,
    '2020-09-07 11:29:31.982 +00:00',
    '2020-09-07 11:29:31.982 +00:00'
  ),(
    NULL,
    8,
    '2',
    4,
    '0x123',
    'testEvent',
    '{"event": "testEvent", "blockNumber": 8, "blockHash": "0x123"}',
    0,
    '2020-09-07 11:29:31.982 +00:00',
    '2020-09-07 11:29:31.982 +00:00'
  ),(
    NULL,
    9,
    '3',
    2,
    '0x123',
    'niceEvent',
    '{"event": "niceEvent", "blockNumber": 9, "blockHash": "0x123"}',
    0,
    '2020-09-07 11:29:31.982 +00:00',
    '2020-09-07 11:29:31.982 +00:00'
  ),(
    NULL,
    9,
    '4',
    2,
    '0x123',
    'otherEvent',
    '{"event": "otherEvent", "blockNumber": 9, "blockHash": "0x123"}',
    0,
    '2020-09-07 11:29:31.982 +00:00',
    '2020-09-07 11:29:31.982 +00:00'
  ),(
    NULL,
    9,
    '5',
    2,
    '0x123',
    'completelyDifferentEvent',
    '{"event": "completelyDifferentEvent", "blockNumber": 9, "blockHash": "0x123"}',
    1,
    '2020-09-07 11:29:31.982 +00:00',
    '2020-09-07 11:29:31.982 +00:00'
  );
[DEBUG] 07/09 02:29:31 (db): Executing SQL (default):
SELECT
  `id`,
  `blockNumber`,
  `transactionHash`,
  `logIndex`,
  `targetConfirmation`,
  `contractAddress`,
  `event`,
  `content`,
  `emitted`,
  `createdAt`,
  `updatedAt`
FROM
  `event` AS `Event`
WHERE
  `Event`.`contractAddress` = '0x123';
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `targetConfirmation`,
    `event`,
    `emitted`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (
    NULL,
    7,
    '1',
    3,
    'testEvent',
    1,
    '2020-09-07 11:29:32.062 +00:00',
    '2020-09-07 11:29:32.062 +00:00'
  ),(
    NULL,
    8,
    '2',
    3,
    'testEvent',
    1,
    '2020-09-07 11:29:32.062 +00:00',
    '2020-09-07 11:29:32.062 +00:00'
  ),(
    NULL,
    9,
    '3',
    3,
    'niceEvent',
    0,
    '2020-09-07 11:29:32.062 +00:00',
    '2020-09-07 11:29:32.062 +00:00'
  ),(
    NULL,
    9,
    '3',
    2,
    'otherEvent',
    1,
    '2020-09-07 11:29:32.062 +00:00',
    '2020-09-07 11:29:32.062 +00:00'
  ),(
    NULL,
    10,
    '4',
    3,
    'otherEvent',
    0,
    '2020-09-07 11:29:32.062 +00:00',
    '2020-09-07 11:29:32.062 +00:00'
  );
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
SELECT
  `blockNumber`,
  `transactionHash`,
  `event`,
  `targetConfirmation`
FROM
  `event` AS `Event`
GROUP BY
  `transactionHash`,
  `event`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[INFO] 07/09 02:29:32 (blockchain:events:dummy): Listener attached, starting processing events.
[INFO] 07/09 02:29:32 (blockchain:events:dummy): => Processing past events from genesis to 11
[DEBUG] 07/09 02:29:32 (blockchain:events:dummy): Emitting event
[DEBUG] 07/09 02:29:32 (blockchain:events:dummy): Emitting event
[DEBUG] 07/09 02:29:32 (blockchain:events:dummy): Emitting event
[DEBUG] 07/09 02:29:32 (blockchain:events:dummy): Emitting event
[INFO] 07/09 02:29:32 (blockchain:events:dummy): => Finished processing past events in 0s
[DEBUG] 07/09 02:29:32 (blockchain:events:dummy): Emitting event
[DEBUG] 07/09 02:29:32 (blockchain:events:dummy): Emitting event
[DEBUG] 07/09 02:29:32 (blockchain:events:dummy): Emitting event
[DEBUG] 07/09 02:29:32 (blockchain:events:dummy): Emitting event
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[INFO] 07/09 02:29:32 (blockchain:events:dummy): Listener attached, starting processing events.
[INFO] 07/09 02:29:32 (blockchain:events:dummy): => Processing past events from genesis to 10
[VERBOSE] 07/09 02:29:32 (blockchain:events:dummy): Threshold block 8
[INFO] 07/09 02:29:32 (blockchain:events:dummy): 2 events to be confirmed.
[DEBUG] 07/09 02:29:32 (blockchain:events:dummy): New testEvent event to be confirmed. Transaction 3.1
[DEBUG] 07/09 02:29:32 (blockchain:events:dummy): New testEvent event to be confirmed. Transaction 4.1
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `logIndex`,
    `targetConfirmation`,
    `contractAddress`,
    `event`,
    `emitted`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (
    NULL,
    9,
    '3',
    1,
    2,
    '[Function: SubstituteJS] -> replace',
    'testEvent',
    0,
    '2020-09-07 11:29:32.411 +00:00',
    '2020-09-07 11:29:32.411 +00:00'
  ),(
    NULL,
    10,
    '4',
    1,
    2,
    '[Function: SubstituteJS] -> replace',
    'testEvent',
    0,
    '2020-09-07 11:29:32.411 +00:00',
    '2020-09-07 11:29:32.411 +00:00'
  );
[INFO] 07/09 02:29:32 (blockchain:events:dummy): 2 events to be emitted.
[DEBUG] 07/09 02:29:32 (blockchain:events:dummy): Emitting event
[DEBUG] 07/09 02:29:32 (blockchain:events:dummy): Emitting event
[INFO] 07/09 02:29:32 (blockchain:events:dummy): => Finished processing past events in 0s
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
SELECT
  count(*) AS `count`
FROM
  `event` AS `Event`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[INFO] 07/09 02:29:32 (blockchain:events:dummy): Listener attached, starting processing events.
[VERBOSE] 07/09 02:29:32 (blockchain:events:dummy): Threshold block 8
[INFO] 07/09 02:29:32 (blockchain:events:dummy): 2 events to be confirmed.
[DEBUG] 07/09 02:29:32 (blockchain:events:dummy): New testEvent event to be confirmed. Transaction 3.1
[DEBUG] 07/09 02:29:32 (blockchain:events:dummy): New testEvent event to be confirmed. Transaction 4.1
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `logIndex`,
    `targetConfirmation`,
    `contractAddress`,
    `event`,
    `emitted`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (
    NULL,
    9,
    '3',
    1,
    2,
    '[Function: SubstituteJS] -> replace',
    'testEvent',
    0,
    '2020-09-07 11:29:32.625 +00:00',
    '2020-09-07 11:29:32.625 +00:00'
  ),(
    NULL,
    10,
    '4',
    1,
    2,
    '[Function: SubstituteJS] -> replace',
    'testEvent',
    0,
    '2020-09-07 11:29:32.625 +00:00',
    '2020-09-07 11:29:32.625 +00:00'
  );
[INFO] 07/09 02:29:32 (blockchain:events:dummy): 2 events to be emitted.
[DEBUG] 07/09 02:29:32 (blockchain:events:dummy): Emitting event
[DEBUG] 07/09 02:29:32 (blockchain:events:dummy): Emitting event
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
SELECT
  count(*) AS `count`
FROM
  `event` AS `Event`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[INFO] 07/09 02:29:32 (blockchain:events:dummy): Listener attached, starting processing events.
[INFO] 07/09 02:29:32 (blockchain:events:dummy): => Processing past events from genesis to 10
[DEBUG] 07/09 02:29:32 (blockchain:events:dummy): Emitting event
[DEBUG] 07/09 02:29:32 (blockchain:events:dummy): Emitting event
[DEBUG] 07/09 02:29:32 (blockchain:events:dummy): Emitting event
[INFO] 07/09 02:29:32 (blockchain:events:dummy): => Finished processing past events in 0s
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:32 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[INFO] 07/09 02:29:33 (blockchain:events:dummy): Listener attached, starting processing events.
[DEBUG] 07/09 02:29:33 (blockchain:events:dummy): Emitting event
[DEBUG] 07/09 02:29:33 (blockchain:events:dummy): Emitting event
[DEBUG] 07/09 02:29:33 (blockchain:events:dummy): Emitting event
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[INFO] 07/09 02:29:33 (blockchain:events:polling): Listener attached, starting processing events.
[VERBOSE] 07/09 02:29:33 (blockchain:events:polling): Received new block number 11
[INFO] 07/09 02:29:33 (blockchain:events:polling): Checking new events between blocks 10-[Function: SubstituteJS] -> number
[DEBUG] 07/09 02:29:33 (blockchain:events:polling): Received events: 
{ '0': [Function: SubstituteJS] -> number }
[DEBUG] 07/09 02:29:33 (blockchain:events:polling): Emitting event
[VERBOSE] 07/09 02:29:33 (blockchain:events:polling): Received new block number 12
[INFO] 07/09 02:29:33 (blockchain:events:polling): Checking new events between blocks 11-[Function: SubstituteJS] -> number
[DEBUG] 07/09 02:29:33 (blockchain:events:polling): Received events: 
{ '0': [Function: SubstituteJS] -> number }
[DEBUG] 07/09 02:29:33 (blockchain:events:polling): Emitting event
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[INFO] 07/09 02:29:33 (blockchain:events:polling): Listener attached, starting processing events.
[VERBOSE] 07/09 02:29:33 (blockchain:events:polling): Received new block number 11
[INFO] 07/09 02:29:33 (blockchain:events:polling): Checking new events between blocks 10-[Function: SubstituteJS] -> number
[DEBUG] 07/09 02:29:33 (blockchain:events:polling): Received events: 
{ '0': [Function: SubstituteJS] -> number }
[DEBUG] 07/09 02:29:33 (blockchain:events:polling): Emitting event
[VERBOSE] 07/09 02:29:33 (blockchain:events:polling): Received new block number 12
[INFO] 07/09 02:29:33 (blockchain:events:polling): Checking new events between blocks 11-[Function: SubstituteJS] -> number
[DEBUG] 07/09 02:29:33 (blockchain:events:polling): Received events: 
[INFO] 07/09 02:29:33 (blockchain:events:polling): No events to be processed.
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:33 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[INFO] 07/09 02:29:33 (blockchain:events:polling): Listener attached, starting processing events.
[VERBOSE] 07/09 02:29:33 (blockchain:events:polling): Received new block number 11
[INFO] 07/09 02:29:33 (blockchain:events:polling): Checking new events between blocks 10-[Function: SubstituteJS] -> number
[DEBUG] 07/09 02:29:33 (blockchain:events:polling): Received events: 
{ '0': [Function: SubstituteJS] -> number }
[DEBUG] 07/09 02:29:33 (blockchain:events:polling): Emitting event
[VERBOSE] 07/09 02:29:34 (blockchain:events:polling): Received new block number 11
[VERBOSE] 07/09 02:29:34 (blockchain:events:polling): Nothing new to process
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[INFO] 07/09 02:29:34 (blockchain:events:polling): Listener attached, starting processing events.
[INFO] 07/09 02:29:34 (blockchain:events:polling): => Processing past events from genesis to [Function: SubstituteJS] -> hash
[DEBUG] 07/09 02:29:34 (blockchain:events:polling): Emitting event
[DEBUG] 07/09 02:29:34 (blockchain:events:polling): Emitting event
[DEBUG] 07/09 02:29:34 (blockchain:events:polling): Emitting event
[DEBUG] 07/09 02:29:34 (blockchain:events:polling): Emitting event
[INFO] 07/09 02:29:34 (blockchain:events:polling): => Finished processing past events in 0s
[VERBOSE] 07/09 02:29:34 (blockchain:events:polling): Received new block number 11
[INFO] 07/09 02:29:34 (blockchain:events:polling): Checking new events between blocks [Function: SubstituteJS] -> number-[Function: SubstituteJS] -> number
[DEBUG] 07/09 02:29:34 (blockchain:events:polling): Received events: 
{ '0': [Function: SubstituteJS] -> number,
  '1': [Function: SubstituteJS] -> number,
  '2': [Function: SubstituteJS] -> number,
  '3': [Function: SubstituteJS] -> number }
[DEBUG] 07/09 02:29:34 (blockchain:events:polling): Emitting event
[DEBUG] 07/09 02:29:34 (blockchain:events:polling): Emitting event
[DEBUG] 07/09 02:29:34 (blockchain:events:polling): Emitting event
[DEBUG] 07/09 02:29:34 (blockchain:events:polling): Emitting event
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `targetConfirmation`,
    `contractAddress`,
    `event`,
    `content`,
    `emitted`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (
    NULL,
    7,
    '1',
    3,
    '0x123',
    'testEvent',
    '{"event": "testEvent", "blockNumber": 7, "blockHash": "0x123"}',
    1,
    '2020-09-07 11:29:34.940 +00:00',
    '2020-09-07 11:29:34.940 +00:00'
  ),(
    NULL,
    8,
    '2',
    4,
    '0x123',
    'testEvent',
    '{"event": "testEvent", "blockNumber": 8, "blockHash": "0x123"}',
    0,
    '2020-09-07 11:29:34.940 +00:00',
    '2020-09-07 11:29:34.940 +00:00'
  ),(
    NULL,
    9,
    '3',
    2,
    '0x666',
    'niceEvent',
    '{"event": "niceEvent", "blockNumber": 9, "blockHash": "0x123"}',
    0,
    '2020-09-07 11:29:34.940 +00:00',
    '2020-09-07 11:29:34.940 +00:00'
  );
[INFO] 07/09 02:29:34 (blockchain:events:polling): Listener attached, starting processing events.
[VERBOSE] 07/09 02:29:34 (blockchain:events:polling): Received new block number 11
[WARN] 07/09 02:29:34 (blockchain:events:polling): Reorg happening! Old hash: 0x123; New hash: 0x321
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
DELETE FROM
  `event`
WHERE
  `contractAddress` = '0x123'
[VERBOSE] 07/09 02:29:34 (blockchain:events:polling): Threshold block 10
[INFO] 07/09 02:29:34 (blockchain:events:polling): 1 events to be confirmed.
[DEBUG] 07/09 02:29:34 (blockchain:events:polling): New testEvent event to be confirmed. Transaction 1.1
[DEBUG] 07/09 02:29:34 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `logIndex`,
    `targetConfirmation`,
    `contractAddress`,
    `event`,
    `emitted`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (
    NULL,
    11,
    '1',
    1,
    1,
    '0x123',
    'testEvent',
    0,
    '2020-09-07 11:29:34.959 +00:00',
    '2020-09-07 11:29:34.959 +00:00'
  );
[INFO] 07/09 02:29:34 (blockchain:events:polling): 0 events to be emitted.
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
SELECT
  count(*) AS `count`
FROM
  `event` AS `Event`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[INFO] 07/09 02:29:35 (blockchain:events:polling): Listener attached, starting processing events.
[VERBOSE] 07/09 02:29:35 (blockchain:events:polling): Received new block number 11
[WARN] 07/09 02:29:35 (blockchain:events:polling): Reorg happening! Old hash: 0x123; New hash: 0x321
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DELETE FROM
  `event`
WHERE
  `contractAddress` = '0x123'
[VERBOSE] 07/09 02:29:35 (blockchain:events:polling): Threshold block 10
[INFO] 07/09 02:29:35 (blockchain:events:polling): 1 events to be confirmed.
[DEBUG] 07/09 02:29:35 (blockchain:events:polling): New testEvent event to be confirmed. Transaction 1.1
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `logIndex`,
    `targetConfirmation`,
    `contractAddress`,
    `event`,
    `emitted`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (
    NULL,
    11,
    '1',
    1,
    1,
    '0x123',
    'testEvent',
    0,
    '2020-09-07 11:29:35.287 +00:00',
    '2020-09-07 11:29:35.287 +00:00'
  );
[INFO] 07/09 02:29:35 (blockchain:events:polling): 0 events to be emitted.
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
SELECT
  count(*) AS `count`
FROM
  `event` AS `Event`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[INFO] 07/09 02:29:35 (blockchain:events:polling): Listener attached, starting processing events.
[VERBOSE] 07/09 02:29:35 (blockchain:events:polling): Received new block number 11
[WARN] 07/09 02:29:35 (blockchain:events:polling): Reorg happening! Old hash: 0x123; New hash: 0x321
[ERROR] 07/09 02:29:35 (blockchain:events:polling): Reorg out of confirmation range! Old hash: 0x222; New hash: 0x33
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
DELETE FROM
  `event`
WHERE
  `contractAddress` = '0x123'
[VERBOSE] 07/09 02:29:35 (blockchain:events:polling): Threshold block 10
[INFO] 07/09 02:29:35 (blockchain:events:polling): 1 events to be confirmed.
[DEBUG] 07/09 02:29:35 (blockchain:events:polling): New testEvent event to be confirmed. Transaction 1.1
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
INSERT INTO
  `event` (
    `id`,
    `blockNumber`,
    `transactionHash`,
    `logIndex`,
    `targetConfirmation`,
    `contractAddress`,
    `event`,
    `emitted`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (
    NULL,
    11,
    '1',
    1,
    1,
    '0x123',
    'testEvent',
    0,
    '2020-09-07 11:29:35.630 +00:00',
    '2020-09-07 11:29:35.630 +00:00'
  );
[INFO] 07/09 02:29:35 (blockchain:events:polling): 0 events to be emitted.
[DEBUG] 07/09 02:29:35 (db): Executing SQL (default):
SELECT
  count(*) AS `count`
FROM
  `event` AS `Event`;
[INFO] 07/09 02:29:35 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 07/09 02:29:35 (blockchain:block-emitter:polling): New block with number 111 with hash 0x123
[INFO] 07/09 02:29:35 (blockchain:block-emitter:polling): Listener removing, stopping processing events.
[INFO] 07/09 02:29:35 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 07/09 02:29:35 (blockchain:block-emitter:polling): New block with number 10 with hash 0x123
[VERBOSE] 07/09 02:29:36 (blockchain:block-emitter:polling): New block with number 11 with hash 0x123
[INFO] 07/09 02:29:36 (blockchain:block-emitter:polling): Listener removing, stopping processing events.
[INFO] 07/09 02:29:36 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 07/09 02:29:36 (blockchain:block-emitter:polling): New block with number 10 with hash 0x123
[INFO] 07/09 02:29:36 (blockchain:block-emitter:polling): Listener removing, stopping processing events.
[INFO] 07/09 02:29:36 (blockchain:block-emitter:listening): Listener attached, starting processing events.
[VERBOSE] 07/09 02:29:36 (blockchain:block-emitter:listening): Current block with number 10 with hash 0x123
[INFO] 07/09 02:29:36 (blockchain:block-emitter:listening): Listener attached, starting processing events.
[VERBOSE] 07/09 02:29:36 (blockchain:block-emitter:listening): Current block with number 9 with hash 0x123
[VERBOSE] 07/09 02:29:36 (blockchain:block-emitter:listening): New block with number 9 with hash 0x123
[VERBOSE] 07/09 02:29:36 (blockchain:block-emitter:listening): New block with number 9 with hash 0x123
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `data-store` (
  `key` VARCHAR(255) PRIMARY KEY,
  `value` VARCHAR(255)
);
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`data-store`)
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_data-store_1`)
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
SELECT
  `key`,
  `value`
FROM
  `data-store` AS `sequelizeStore-dbstore`;
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
INSERT INTO
  `rates` (
    `token`,
    `usd`,
    `eur`,
    `btc`,
    `ars`,
    `cny`,
    `krw`,
    `jpy`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  ($ 1, $ 2, $ 3, $ 4, $ 5, $ 6, $ 7, $ 8, $ 9, $ 10);
[DEBUG] 07/09 02:29:36 (db): Executing SQL (default):
SELECT
  `token`,
  `usd`,
  `eur`,
  `btc`,
  `ars`,
  `cny`,
  `krw`,
  `jpy`,
  `createdAt`,
  `updatedAt`
FROM
  `rates` AS `Rate`
WHERE
  `Rate`.`token` = 123456789012345;
[INFO] 07/09 02:29:38 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 07/09 02:29:38 (blockchain:block-emitter:polling): New block with number undefined with hash undefined
[WARN] 07/09 02:29:39 (cli:start): Reorg detected outside of confirmation range. Rebuilding the service's state!
[INFO] 07/09 02:29:39 (cli:start): Stopping the app
[DEBUG] 07/09 02:29:39 (rates:updater): Acquiring lock for update
[INFO] 07/09 02:29:39 (rates:updater): Updating rates using coingecko provider.
[DEBUG] 07/09 02:29:40 (db): Executing SQL (edfec163-5922-4c2d-88fe-4c8b3c65b90e):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 07/09 02:29:40 (db): Executing SQL (edfec163-5922-4c2d-88fe-4c8b3c65b90e):
SELECT
  `token`,
  `usd`,
  `eur`,
  `btc`,
  `ars`,
  `cny`,
  `krw`,
  `jpy`,
  `createdAt`,
  `updatedAt`
FROM
  `rates` AS `Rate`
WHERE
  `Rate`.`token` = 'rif';
[DEBUG] 07/09 02:29:40 (db): Executing SQL (edfec163-5922-4c2d-88fe-4c8b3c65b90e):
INSERT INTO
  `rates` (`token`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 07/09 02:29:40 (db): Executing SQL (edfec163-5922-4c2d-88fe-4c8b3c65b90e):
COMMIT;
[DEBUG] 07/09 02:29:40 (db): Executing SQL (default):
UPDATE
  `rates`
SET
  `usd` = $ 1,
  `eur` = $ 2,
  `btc` = $ 3,
  `ars` = $ 4,
  `cny` = $ 5,
  `krw` = $ 6,
  `jpy` = $ 7,
  `updatedAt` = $ 8
WHERE
  `token` = $ 9
[DEBUG] 07/09 02:29:40 (db): Executing SQL (aa7788b0-786d-4632-af79-60ee387054ca):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 07/09 02:29:40 (db): Executing SQL (aa7788b0-786d-4632-af79-60ee387054ca):
SELECT
  `token`,
  `usd`,
  `eur`,
  `btc`,
  `ars`,
  `cny`,
  `krw`,
  `jpy`,
  `createdAt`,
  `updatedAt`
FROM
  `rates` AS `Rate`
WHERE
  `Rate`.`token` = 'rbtc';
[DEBUG] 07/09 02:29:40 (db): Executing SQL (aa7788b0-786d-4632-af79-60ee387054ca):
INSERT INTO
  `rates` (`token`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 07/09 02:29:40 (db): Executing SQL (aa7788b0-786d-4632-af79-60ee387054ca):
COMMIT;
[DEBUG] 07/09 02:29:40 (db): Executing SQL (default):
UPDATE
  `rates`
SET
  `usd` = $ 1,
  `eur` = $ 2,
  `btc` = $ 3,
  `ars` = $ 4,
  `cny` = $ 5,
  `krw` = $ 6,
  `jpy` = $ 7,
  `updatedAt` = $ 8
WHERE
  `token` = $ 9
[INFO] 07/09 02:29:40 (cli:start): Restarting the app
[DEBUG] 07/09 02:29:42 (db): Executing SQL (default):
SELECT
  `token`,
  `usd`,
  `eur`,
  `btc`,
  `ars`,
  `cny`,
  `krw`,
  `jpy`,
  `createdAt`,
  `updatedAt`
FROM
  `rates` AS `Rate`
WHERE
  `Rate`.`token` = '123456789012345';
[INFO] 07/09 02:29:43 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 07/09 02:29:43 (blockchain:block-emitter:polling): New block with number 10 with hash 0x123
[INFO] 07/09 02:29:44 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 07/09 02:29:44 (blockchain:block-emitter:polling): New block with number 10 with hash 0x123
[INFO] 07/09 02:29:44 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 07/09 02:29:44 (blockchain:block-emitter:polling): New block with number 10 with hash 0x123
[INFO] 07/09 02:29:45 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 07/09 02:29:45 (blockchain:block-emitter:polling): New block with number 10 with hash 0x123
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (d6b62c83-833c-4460-ab81-5ed58989fd57):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (d6b62c83-833c-4460-ab81-5ed58989fd57):
SELECT
  `Offer`.`provider`,
  `Offer`.`totalCapacity`,
  `Offer`.`peerId`,
  `Offer`.`createdAt`,
  `Offer`.`updatedAt`,
  `plans`.`id` AS `plans.id`,
  `plans`.`period` AS `plans.period`,
  `plans`.`price` AS `plans.price`,
  `plans`.`offerId` AS `plans.offerId`,
  `plans`.`createdAt` AS `plans.createdAt`,
  `plans`.`updatedAt` AS `plans.updatedAt`
FROM
  `storage_offer` AS `Offer`
  LEFT OUTER JOIN `storage_billing-plan` AS `plans` ON `Offer`.`provider` = `plans`.`offerId`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 07/09 02:29:46 (db): Executing SQL (d6b62c83-833c-4460-ab81-5ed58989fd57):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (d6b62c83-833c-4460-ab81-5ed58989fd57):
COMMIT;
[INFO] 07/09 02:29:46 (storage:handler:offer): Created new StorageOffer for TestAddress
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
SELECT
  `provider`,
  `totalCapacity`,
  `peerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_offer` AS `Offer`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (88609ab2-a76a-4006-8d8d-578bbf4cec26):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (88609ab2-a76a-4006-8d8d-578bbf4cec26):
SELECT
  `Offer`.`provider`,
  `Offer`.`totalCapacity`,
  `Offer`.`peerId`,
  `Offer`.`createdAt`,
  `Offer`.`updatedAt`,
  `plans`.`id` AS `plans.id`,
  `plans`.`period` AS `plans.period`,
  `plans`.`price` AS `plans.price`,
  `plans`.`offerId` AS `plans.offerId`,
  `plans`.`createdAt` AS `plans.createdAt`,
  `plans`.`updatedAt` AS `plans.updatedAt`
FROM
  `storage_offer` AS `Offer`
  LEFT OUTER JOIN `storage_billing-plan` AS `plans` ON `Offer`.`provider` = `plans`.`offerId`
WHERE
  `Offer`.`provider` = 'test';
[DEBUG] 07/09 02:29:46 (db): Executing SQL (88609ab2-a76a-4006-8d8d-578bbf4cec26):
COMMIT;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
UPDATE
  `storage_offer`
SET
  `totalCapacity` = $ 1,
  `updatedAt` = $ 2
WHERE
  `provider` = $ 3
[INFO] 07/09 02:29:46 (storage:handler:offer): Updating capacity 1000 (ID: test)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (36151cb0-336e-4403-962e-053679fb366f):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (36151cb0-336e-4403-962e-053679fb366f):
SELECT
  `Offer`.`provider`,
  `Offer`.`totalCapacity`,
  `Offer`.`peerId`,
  `Offer`.`createdAt`,
  `Offer`.`updatedAt`,
  `plans`.`id` AS `plans.id`,
  `plans`.`period` AS `plans.period`,
  `plans`.`price` AS `plans.price`,
  `plans`.`offerId` AS `plans.offerId`,
  `plans`.`createdAt` AS `plans.createdAt`,
  `plans`.`updatedAt` AS `plans.updatedAt`
FROM
  `storage_offer` AS `Offer`
  LEFT OUTER JOIN `storage_billing-plan` AS `plans` ON `Offer`.`provider` = `plans`.`offerId`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 07/09 02:29:46 (db): Executing SQL (36151cb0-336e-4403-962e-053679fb366f):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (36151cb0-336e-4403-962e-053679fb366f):
COMMIT;
[INFO] 07/09 02:29:46 (storage:handler:offer): Created new StorageOffer for TestAddress
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
UPDATE
  `storage_offer`
SET
  `totalCapacity` = $ 1,
  `updatedAt` = $ 2
WHERE
  `provider` = $ 3
[INFO] 07/09 02:29:46 (storage:handler:offer): Updating capacity 1000 (ID: TestAddress)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
SELECT
  `provider`,
  `totalCapacity`,
  `peerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_offer` AS `Offer`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (de59228b-2517-4f98-80e5-60e54a8d1fb2):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (de59228b-2517-4f98-80e5-60e54a8d1fb2):
SELECT
  `Offer`.`provider`,
  `Offer`.`totalCapacity`,
  `Offer`.`peerId`,
  `Offer`.`createdAt`,
  `Offer`.`updatedAt`,
  `plans`.`id` AS `plans.id`,
  `plans`.`period` AS `plans.period`,
  `plans`.`price` AS `plans.price`,
  `plans`.`offerId` AS `plans.offerId`,
  `plans`.`createdAt` AS `plans.createdAt`,
  `plans`.`updatedAt` AS `plans.updatedAt`
FROM
  `storage_offer` AS `Offer`
  LEFT OUTER JOIN `storage_billing-plan` AS `plans` ON `Offer`.`provider` = `plans`.`offerId`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 07/09 02:29:46 (db): Executing SQL (de59228b-2517-4f98-80e5-60e54a8d1fb2):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (de59228b-2517-4f98-80e5-60e54a8d1fb2):
COMMIT;
[INFO] 07/09 02:29:46 (storage:handler:offer): Created new StorageOffer for TestAddress
[INFO] 07/09 02:29:46 (storage:handler:offer): Updating period 69696 to price 1000 (ID: TestAddress)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
SELECT
  `provider`,
  `totalCapacity`,
  `peerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_offer` AS `Offer`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
SELECT
  `id`,
  `period`,
  `price`,
  `offerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_billing-plan` AS `BillingPlan`
WHERE
  `BillingPlan`.`offerId` = 'TestAddress'
LIMIT
  1;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (5038d214-b368-4e39-845f-b8b4403b006b):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (5038d214-b368-4e39-845f-b8b4403b006b):
SELECT
  `Offer`.`provider`,
  `Offer`.`totalCapacity`,
  `Offer`.`peerId`,
  `Offer`.`createdAt`,
  `Offer`.`updatedAt`,
  `plans`.`id` AS `plans.id`,
  `plans`.`period` AS `plans.period`,
  `plans`.`price` AS `plans.price`,
  `plans`.`offerId` AS `plans.offerId`,
  `plans`.`createdAt` AS `plans.createdAt`,
  `plans`.`updatedAt` AS `plans.updatedAt`
FROM
  `storage_offer` AS `Offer`
  LEFT OUTER JOIN `storage_billing-plan` AS `plans` ON `Offer`.`provider` = `plans`.`offerId`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 07/09 02:29:46 (db): Executing SQL (5038d214-b368-4e39-845f-b8b4403b006b):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (5038d214-b368-4e39-845f-b8b4403b006b):
COMMIT;
[INFO] 07/09 02:29:46 (storage:handler:offer): Created new StorageOffer for TestAddress
[INFO] 07/09 02:29:46 (storage:handler:offer): Updating period 99 to price 1000 (ID: TestAddress)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
SELECT
  `provider`,
  `totalCapacity`,
  `peerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_offer` AS `Offer`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
SELECT
  `id`,
  `period`,
  `price`,
  `offerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_billing-plan` AS `BillingPlan`
WHERE
  `BillingPlan`.`offerId` = 'TestAddress'
  AND `BillingPlan`.`period` = '99'
LIMIT
  1;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (437a9c12-567f-40e5-baf0-691c024a1263):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (437a9c12-567f-40e5-baf0-691c024a1263):
SELECT
  `Offer`.`provider`,
  `Offer`.`totalCapacity`,
  `Offer`.`peerId`,
  `Offer`.`createdAt`,
  `Offer`.`updatedAt`,
  `plans`.`id` AS `plans.id`,
  `plans`.`period` AS `plans.period`,
  `plans`.`price` AS `plans.price`,
  `plans`.`offerId` AS `plans.offerId`,
  `plans`.`createdAt` AS `plans.createdAt`,
  `plans`.`updatedAt` AS `plans.updatedAt`
FROM
  `storage_offer` AS `Offer`
  LEFT OUTER JOIN `storage_billing-plan` AS `plans` ON `Offer`.`provider` = `plans`.`offerId`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 07/09 02:29:46 (db): Executing SQL (437a9c12-567f-40e5-baf0-691c024a1263):
COMMIT;
[INFO] 07/09 02:29:46 (storage:handler:offer): Updating period 99 to price 99999 (ID: TestAddress)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
UPDATE
  `storage_billing-plan`
SET
  `price` = $ 1,
  `updatedAt` = $ 2
WHERE
  `id` = $ 3
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
SELECT
  `provider`,
  `totalCapacity`,
  `peerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_offer` AS `Offer`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
SELECT
  `id`,
  `period`,
  `price`,
  `offerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_billing-plan` AS `BillingPlan`
WHERE
  `BillingPlan`.`offerId` = 'TestAddress'
  AND `BillingPlan`.`period` = '99'
LIMIT
  1;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (4054835c-03fd-4a3b-a4a5-e3f80dc6da50):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (4054835c-03fd-4a3b-a4a5-e3f80dc6da50):
SELECT
  `Offer`.`provider`,
  `Offer`.`totalCapacity`,
  `Offer`.`peerId`,
  `Offer`.`createdAt`,
  `Offer`.`updatedAt`,
  `plans`.`id` AS `plans.id`,
  `plans`.`period` AS `plans.period`,
  `plans`.`price` AS `plans.price`,
  `plans`.`offerId` AS `plans.offerId`,
  `plans`.`createdAt` AS `plans.createdAt`,
  `plans`.`updatedAt` AS `plans.updatedAt`
FROM
  `storage_offer` AS `Offer`
  LEFT OUTER JOIN `storage_billing-plan` AS `plans` ON `Offer`.`provider` = `plans`.`offerId`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 07/09 02:29:46 (db): Executing SQL (4054835c-03fd-4a3b-a4a5-e3f80dc6da50):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (4054835c-03fd-4a3b-a4a5-e3f80dc6da50):
COMMIT;
[INFO] 07/09 02:29:46 (storage:handler:offer): Created new StorageOffer for TestAddress
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
SELECT
  `provider`,
  `totalCapacity`,
  `peerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_offer` AS `Offer`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:46 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (8bacb702-98d5-4c46-9814-345ac61fed3b):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (8bacb702-98d5-4c46-9814-345ac61fed3b):
SELECT
  `Offer`.`provider`,
  `Offer`.`totalCapacity`,
  `Offer`.`peerId`,
  `Offer`.`createdAt`,
  `Offer`.`updatedAt`,
  `plans`.`id` AS `plans.id`,
  `plans`.`period` AS `plans.period`,
  `plans`.`price` AS `plans.price`,
  `plans`.`offerId` AS `plans.offerId`,
  `plans`.`createdAt` AS `plans.createdAt`,
  `plans`.`updatedAt` AS `plans.updatedAt`
FROM
  `storage_offer` AS `Offer`
  LEFT OUTER JOIN `storage_billing-plan` AS `plans` ON `Offer`.`provider` = `plans`.`offerId`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 07/09 02:29:47 (db): Executing SQL (8bacb702-98d5-4c46-9814-345ac61fed3b):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (8bacb702-98d5-4c46-9814-345ac61fed3b):
COMMIT;
[INFO] 07/09 02:29:47 (storage:handler:offer): Created new StorageOffer for TestAddress
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (be76015a-df29-4265-a4f9-7520d1aa5e88):
BEGIN IMMEDIATE TRANSACTION;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (be76015a-df29-4265-a4f9-7520d1aa5e88):
SELECT
  `Offer`.`provider`,
  `Offer`.`totalCapacity`,
  `Offer`.`peerId`,
  `Offer`.`createdAt`,
  `Offer`.`updatedAt`,
  `plans`.`id` AS `plans.id`,
  `plans`.`period` AS `plans.period`,
  `plans`.`price` AS `plans.price`,
  `plans`.`offerId` AS `plans.offerId`,
  `plans`.`createdAt` AS `plans.createdAt`,
  `plans`.`updatedAt` AS `plans.updatedAt`
FROM
  `storage_offer` AS `Offer`
  LEFT OUTER JOIN `storage_billing-plan` AS `plans` ON `Offer`.`provider` = `plans`.`offerId`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 07/09 02:29:47 (db): Executing SQL (be76015a-df29-4265-a4f9-7520d1aa5e88):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (be76015a-df29-4265-a4f9-7520d1aa5e88):
COMMIT;
[INFO] 07/09 02:29:47 (storage:handler:offer): Created new StorageOffer for TestAddress
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
UPDATE
  `storage_offer`
SET
  `peerId` = $ 1,
  `updatedAt` = $ 2
WHERE
  `provider` = $ 3
[INFO] 07/09 02:29:47 (storage:handler:offer): PeerId FakePeerId defined (ID: TestAddress)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
SELECT
  `provider`,
  `totalCapacity`,
  `peerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_offer` AS `Offer`
WHERE
  `Offer`.`provider` = 'TestAddress';
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DELETE FROM
  `storage_billing-plan`
WHERE
  `offerId` = 'TestAddress'
  AND `period` = '99'
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
SELECT
  `id`,
  `period`,
  `price`,
  `offerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_billing-plan` AS `BillingPlan`
WHERE
  `BillingPlan`.`offerId` = 'TestAddress'
  AND `BillingPlan`.`period` = 99
LIMIT
  1;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
SELECT
  `id`,
  `period`,
  `price`,
  `offerId`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_billing-plan` AS `BillingPlan`
WHERE
  `BillingPlan`.`offerId` = 'TestAddress'
  AND `BillingPlan`.`period` = 99
LIMIT
  1;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
INSERT
  OR IGNORE INTO `storage_agreement` (
    `agreementReference`,
    `dataReference`,
    `consumer`,
    `size`,
    `isActive`,
    `billingPeriod`,
    `billingPrice`,
    `availableFunds`,
    `lastPayout`,
    `offerId`
  )
VALUES
  (
    '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2',
    'Reference1Reference2',
    '0x41677265656d656e7443726561746f72',
    '100',
    1,
    '99',
    '100',
    '100',
    '52655-06-13 00:26:50.000 +00:00',
    'TestAddress'
  );
UPDATE
  `storage_agreement`
SET
  `agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2',
  `dataReference` = 'Reference1Reference2',
  `consumer` = '0x41677265656d656e7443726561746f72',
  `offerId` = 'TestAddress',
  `size` = '100',
  `billingPeriod` = '99',
  `billingPrice` = '100',
  `availableFunds` = '100',
  `lastPayout` = '52655-06-13 00:26:50.000 +00:00'
WHERE
  (
    `agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2'
  )
[INFO] 07/09 02:29:47 (storage:handler:request): Created new Agreement with ID 0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2 for offer TestAddress
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2'
  AND `Agreement`.`offerId` = 'TestAddress';
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2';
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
INSERT INTO
  `storage_agreement` (
    `agreementReference`,
    `dataReference`,
    `consumer`,
    `size`,
    `isActive`,
    `billingPeriod`,
    `billingPrice`,
    `availableFunds`,
    `lastPayout`,
    `offerId`
  )
VALUES
  ($ 1, $ 2, $ 3, $ 4, $ 5, $ 6, $ 7, $ 8, $ 9, $ 10);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2';
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
UPDATE
  `storage_agreement`
SET
  `isActive` = $ 1
WHERE
  `agreementReference` = $ 2
[INFO] 07/09 02:29:47 (storage:handler:request): Agreement 0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2 was stopped.
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2'
  AND `Agreement`.`offerId` = 'TestAddress';
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2';
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 07/09 02:29:47 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
INSERT INTO
  `storage_agreement` (
    `agreementReference`,
    `dataReference`,
    `consumer`,
    `size`,
    `isActive`,
    `billingPeriod`,
    `billingPrice`,
    `availableFunds`,
    `lastPayout`,
    `offerId`
  )
VALUES
  ($ 1, $ 2, $ 3, $ 4, $ 5, $ 6, $ 7, $ 8, $ 9, $ 10);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2';
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
UPDATE
  `storage_agreement`
SET
  `availableFunds` = $ 1
WHERE
  `agreementReference` = $ 2
[INFO] 07/09 02:29:48 (storage:handler:request): Agreement 0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2 was topped up with 50.
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2'
  AND `Agreement`.`offerId` = 'TestAddress';
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2';
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
INSERT INTO
  `storage_agreement` (
    `agreementReference`,
    `dataReference`,
    `consumer`,
    `size`,
    `isActive`,
    `billingPeriod`,
    `billingPrice`,
    `availableFunds`,
    `lastPayout`,
    `offerId`
  )
VALUES
  ($ 1, $ 2, $ 3, $ 4, $ 5, $ 6, $ 7, $ 8, $ 9, $ 10);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2';
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
UPDATE
  `storage_agreement`
SET
  `availableFunds` = $ 1
WHERE
  `agreementReference` = $ 2
[INFO] 07/09 02:29:48 (storage:handler:request): 50 was withdrawn from funds of Agreement 0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2.
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2'
  AND `Agreement`.`offerId` = 'TestAddress';
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2';
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
INSERT INTO
  `storage_offer` (`provider`, `createdAt`, `updatedAt`)
VALUES
  ($ 1, $ 2, $ 3);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
INSERT INTO
  `storage_billing-plan` (
    `id`,
    `period`,
    `price`,
    `offerId`,
    `createdAt`,
    `updatedAt`
  )
VALUES
  (NULL, $ 1, $ 2, $ 3, $ 4, $ 5);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
INSERT INTO
  `storage_agreement` (
    `agreementReference`,
    `dataReference`,
    `consumer`,
    `size`,
    `isActive`,
    `billingPeriod`,
    `billingPrice`,
    `availableFunds`,
    `lastPayout`,
    `offerId`
  )
VALUES
  ($ 1, $ 2, $ 3, $ 4, $ 5, $ 6, $ 7, $ 8, $ 9, $ 10);
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2';
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
UPDATE
  `storage_agreement`
SET
  `availableFunds` = $ 1
WHERE
  `agreementReference` = $ 2
[INFO] 07/09 02:29:48 (storage:handler:request): 50 was payed out from funds of Agreement 0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2.
[DEBUG] 07/09 02:29:48 (db): Executing SQL (default):
SELECT
  `agreementReference`,
  `dataReference`,
  `consumer`,
  `size`,
  `isActive`,
  `billingPeriod`,
  `billingPrice`,
  `availableFunds`,
  `lastPayout`,
  `offerId`
FROM
  `storage_agreement` AS `Agreement`
WHERE
  `Agreement`.`agreementReference` = '0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2'
  AND `Agreement`.`offerId` = 'TestAddress';
[INFO] 07/09 02:30:45 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 07/09 02:30:45 (blockchain:block-emitter:polling): New block with number 10 with hash 0x123
[INFO] 07/09 02:33:15 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 07/09 02:33:15 (blockchain:block-emitter:polling): New block with number 10 with hash 0x123
[INFO] 07/09 02:34:37 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 07/09 02:34:37 (blockchain:block-emitter:polling): New block with number 10 with hash 0x123
[INFO] 07/09 02:35:08 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 07/09 02:35:08 (blockchain:block-emitter:polling): New block with number 10 with hash 0x123
[INFO] 07/09 02:35:08 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 07/09 02:35:08 (blockchain:block-emitter:polling): New block with number 10 with hash 0x123
[INFO] 07/09 02:35:09 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 07/09 02:35:09 (blockchain:block-emitter:polling): New block with number 10 with hash 0x123
[INFO] 07/09 02:35:09 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[VERBOSE] 07/09 02:35:09 (blockchain:block-emitter:polling): New block with number 10 with hash 0x123
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_stakes`;
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
DROP TABLE IF EXISTS `event`;
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `event` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `blockNumber` INTEGER,
  `transactionHash` VARCHAR(66),
  `logIndex` INTEGER,
  `targetConfirmation` INTEGER,
  `contractAddress` VARCHAR(66),
  `event` TEXT,
  `content` TEXT,
  `emitted` TINYINT(1) DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`event`)
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
CREATE UNIQUE INDEX `event_transaction_hash_log_index` ON `event` (`transactionHash`, `logIndex`)
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rates`;
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rates` (
  `token` VARCHAR(15) PRIMARY KEY,
  `usd` FLOAT,
  `eur` FLOAT,
  `btc` FLOAT,
  `ars` FLOAT,
  `cny` FLOAT,
  `krw` FLOAT,
  `jpy` FLOAT,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rates`)
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rates_1`)
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain`;
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain` (
  `tokenId` VARCHAR(255) PRIMARY KEY,
  `name` VARCHAR(255)
);
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain`)
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_1`)
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain-offer`;
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain-offer` (
  `offerId` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `ownerAddress` VARCHAR(255),
  `ownerDomain` VARCHAR(255),
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `creationDate` DATETIME
);
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain-offer`)
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain-offer_1`)
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_domain_expiration`;
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_domain_expiration` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `date` DATETIME
);
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_domain_expiration`)
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_domain_expiration_1`)
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_owner`;
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_owner` (
  `tokenId` VARCHAR(255) PRIMARY KEY REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `address` VARCHAR(255)
);
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_owner`)
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_owner_1`)
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_sold-domain`;
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_sold-domain` (
  `id` VARCHAR(255) PRIMARY KEY,
  `tokenId` VARCHAR(255) REFERENCES `rns_domain` (`tokenId`) ON DELETE CASCADE ON UPDATE CASCADE,
  `paymentToken` VARCHAR(255),
  `price` DECIMAL,
  `priceString` VARCHAR(255),
  `soldDate` DATETIME
);
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_sold-domain`)
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_sold-domain_1`)
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
DROP TABLE IF EXISTS `rns_transfer`;
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `rns_transfer` (
  `id` VARCHAR(255) NOT NULL,
  `tokenId` VARCHAR(255) NOT NULL,
  `sellerAddress` VARCHAR(255),
  `buyerAddress` VARCHAR(255),
  PRIMARY KEY (`id`, `tokenId`)
);
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`rns_transfer`)
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_rns_transfer_1`)
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_offer`;
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_offer` (
  `provider` VARCHAR(64) PRIMARY KEY,
  `totalCapacity` VARCHAR(255),
  `peerId` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_offer`)
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_offer_1`)
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_agreement`;
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_agreement` (
  `agreementReference` VARCHAR(67) PRIMARY KEY,
  `dataReference` VARCHAR(255),
  `consumer` VARCHAR(64),
  `size` VARCHAR(255),
  `isActive` TINYINT(1) DEFAULT 1,
  `billingPeriod` VARCHAR(255),
  `billingPrice` VARCHAR(255),
  `availableFunds` VARCHAR(255),
  `lastPayout` DATETIME,
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE
);
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_agreement`)
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
PRAGMA INDEX_INFO(`sqlite_autoindex_storage_agreement_1`)
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_billing-plan`;
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_billing-plan` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `period` VARCHAR(255),
  `price` VARCHAR(255),
  `offerId` VARCHAR(255) REFERENCES `storage_offer` (`provider`) ON DELETE NO ACTION ON UPDATE CASCADE,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_billing-plan`)
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
DROP TABLE IF EXISTS `storage_stakes`;
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
CREATE TABLE IF NOT EXISTS `storage_stakes` (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `total` VARCHAR(255),
  `tokenName` VARCHAR(255),
  `token` VARCHAR(255),
  `account` VARCHAR(255),
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NOT NULL
);
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
PRAGMA INDEX_LIST(`storage_stakes`)
[DEBUG] 08/09 12:48:16 (db): Executing SQL (default):
SELECT
  `id`,
  `total`,
  `tokenName`,
  `token`,
  `account`,
  `createdAt`,
  `updatedAt`
FROM
  `storage_stakes` AS `StakeModel`
WHERE
  `StakeModel`.`token` = 'SomeTokenAddress'
LIMIT
  1;
[INFO] 08/09 12:52:25 (storage:handler:stake): Found stake: 
[INFO] 08/09 12:52:25 (storage:handler:stake): Created stake: 
{ dataValues:
   { id: 1,
     account: 'TestAddress',
     token: 'SomeTokenAddress',
     total: '0',
     updatedAt: 2020-09-08T09:52:25.174Z,
     createdAt: 2020-09-08T09:52:25.174Z },
  _previousDataValues:
   { account: 'TestAddress',
     token: 'SomeTokenAddress',
     total: '0',
     id: 1,
     tokenName: undefined,
     createdAt: 2020-09-08T09:52:25.174Z,
     updatedAt: 2020-09-08T09:52:25.174Z },
  _changed:
   { account: false,
     token: false,
     total: false,
     id: false,
     tokenName: false,
     createdAt: false,
     updatedAt: false },
  _modelOptions:
   { timestamps: true,
     validate: {},
     freezeTableName: true,
     underscored: false,
     paranoid: false,
     rejectOnEmpty: false,
     whereCollection: { account: 'TestAddress', token: 'SomeTokenAddress' },
     schema: null,
     schemaDelimiter: '',
     defaultScope: {},
     scopes: {},
     indexes: [],
     name: { plural: 'StakeModels', singular: 'StakeModel' },
     omitNull: false,
     tableName: 'storage_stakes',
     sequelize:
      Sequelize {
        options:
         { dialect: 'sqlite',
           dialectModule: null,
           dialectModulePath: null,
           host: 'db_test.sqlite',
           protocol: 'tcp',
           define: {},
           query: {},
           sync: {},
           timezone: '+00:00',
           clientMinMessages: 'warning',
           standardConformingStrings: true,
           logging: [Function: logging],
           omitNull: false,
           native: false,
           replication: false,
           ssl: undefined,
           pool: {},
           quoteIdentifiers: true,
           hooks: {},
           retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
           transactionType: 'IMMEDIATE',
           isolationLevel: null,
           databaseVersion: 0,
           typeValidation: false,
           benchmark: false,
           minifyAliases: false,
           logQueryParameters: false,
           models:
            [ '/Users/naz_dou/Documents/Projects/IovLabs/rif-marketplace-cache/src/**/*.model.+(ts|js)' ],
           modelMatch: [Function: modelMatch],
           dialectOptions: [Object: null prototype] {} },
        config:
         { database: undefined,
           username: undefined,
           password: null,
           host: 'db_test.sqlite',
           port: undefined,
           pool: {},
           protocol: 'tcp',
           native: false,
           ssl: undefined,
           replication: false,
           dialectModule: null,
           dialectModulePath: null,
           keepDefaultTimezone: undefined,
           dialectOptions: [Object: null prototype] {} },
        dialect:
         SqliteDialect {
           sequelize: [Circular],
           connectionManager:
            ConnectionManager {
              sequelize: [Circular],
              config:
               { database: undefined,
                 username: undefined,
                 password: null,
                 host: 'db_test.sqlite',
                 port: undefined,
                 pool: [Object],
                 protocol: 'tcp',
                 native: false,
                 ssl: undefined,
                 replication: false,
                 dialectModule: null,
                 dialectModulePath: null,
                 keepDefaultTimezone: undefined,
                 dialectOptions: {} },
              dialect: [Circular],
              versionPromise: null,
              dialectName: 'sqlite',
              pool:
               Pool {
                 _factory: [Object],
                 _count: 0,
                 _draining: false,
                 _pendingAcquires: [],
                 _inUseObjects: [],
                 _availableObjects: [],
                 _removeIdleTimer: null,
                 _removeIdleScheduled: false },
              connections: { default: Database {} },
              lib:
               { Database: [Function: Database],
                 Statement: [Function: Statement],
                 Backup: [Function: Backup],
                 OPEN_READONLY: 1,
                 OPEN_READWRITE: 2,
                 OPEN_CREATE: 4,
                 OPEN_FULLMUTEX: 65536,
                 OPEN_URI: 64,
                 OPEN_SHAREDCACHE: 131072,
                 OPEN_PRIVATECACHE: 262144,
                 VERSION: '3.31.1',
                 SOURCE_ID:
                  '2020-01-27 19:55:54 3bfa9cc97da10598521b342961df8f5f68c7388fa117345eeb516eaa837bb4d6',
                 VERSION_NUMBER: 3031001,
                 OK: 0,
                 ERROR: 1,
                 INTERNAL: 2,
                 PERM: 3,
                 ABORT: 4,
                 BUSY: 5,
                 LOCKED: 6,
                 NOMEM: 7,
                 READONLY: 8,
                 INTERRUPT: 9,
                 IOERR: 10,
                 CORRUPT: 11,
                 NOTFOUND: 12,
                 FULL: 13,
                 CANTOPEN: 14,
                 PROTOCOL: 15,
                 EMPTY: 16,
                 SCHEMA: 17,
                 TOOBIG: 18,
                 CONSTRAINT: 19,
                 MISMATCH: 20,
                 MISUSE: 21,
                 NOLFS: 22,
                 AUTH: 23,
                 FORMAT: 24,
                 RANGE: 25,
                 NOTADB: 26,
                 cached: [Object],
                 verbose: [Function] } },
           QueryGenerator:
            SQLiteQueryGenerator {
              sequelize: [Circular],
              options:
               { dialect: 'sqlite',
                 dialectModule: null,
                 dialectModulePath: null,
                 host: 'db_test.sqlite',
                 protocol: 'tcp',
                 define: {},
                 query: {},
                 sync: {},
                 timezone: '+00:00',
                 clientMinMessages: 'warning',
                 standardConformingStrings: true,
                 logging: [Function: logging],
                 omitNull: false,
                 native: false,
                 replication: false,
                 ssl: undefined,
                 pool: {},
                 quoteIdentifiers: true,
                 hooks: {},
                 retry: [Object],
                 transactionType: 'IMMEDIATE',
                 isolationLevel: null,
                 databaseVersion: 0,
                 typeValidation: false,
                 benchmark: false,
                 minifyAliases: false,
                 logQueryParameters: false,
                 models: [Array],
                 modelMatch: [Function: modelMatch],
                 dialectOptions: [Object: null prototype] {} },
              dialect: 'sqlite',
              _dialect: [Circular],
              OperatorMap:
               { [Symbol(eq)]: '=',
                 [Symbol(ne)]: '!=',
                 [Symbol(gte)]: '>=',
                 [Symbol(gt)]: '>',
                 [Symbol(lte)]: '<=',
                 [Symbol(lt)]: '<',
                 [Symbol(not)]: 'IS NOT',
                 [Symbol(is)]: 'IS',
                 [Symbol(in)]: 'IN',
                 [Symbol(notIn)]: 'NOT IN',
                 [Symbol(like)]: 'LIKE',
                 [Symbol(notLike)]: 'NOT LIKE',
                 [Symbol(iLike)]: 'ILIKE',
                 [Symbol(notILike)]: 'NOT ILIKE',
                 [Symbol(startsWith)]: 'LIKE',
                 [Symbol(endsWith)]: 'LIKE',
                 [Symbol(substring)]: 'LIKE',
                 [Symbol(regexp)]: 'REGEXP',
                 [Symbol(notRegexp)]: 'NOT REGEXP',
                 [Symbol(iRegexp)]: '~*',
                 [Symbol(notIRegexp)]: '!~*',
                 [Symbol(between)]: 'BETWEEN',
                 [Symbol(notBetween)]: 'NOT BETWEEN',
                 [Symbol(overlap)]: '&&',
                 [Symbol(contains)]: '@>',
                 [Symbol(contained)]: '<@',
                 [Symbol(adjacent)]: '-|-',
                 [Symbol(strictLeft)]: '<<',
                 [Symbol(strictRight)]: '>>',
                 [Symbol(noExtendRight)]: '&<',
                 [Symbol(noExtendLeft)]: '&>',
                 [Symbol(any)]: 'ANY',
                 [Symbol(all)]: 'ALL',
                 [Symbol(and)]: ' AND ',
                 [Symbol(or)]: ' OR ',
                 [Symbol(col)]: 'COL',
                 [Symbol(placeholder)]: '$$PLACEHOLDER$$' },
              typeValidation: undefined } },
        queryInterface:
         QueryInterface {
           sequelize: [Circular],
           QueryGenerator:
            SQLiteQueryGenerator {
              sequelize: [Circular],
              options:
               { dialect: 'sqlite',
                 dialectModule: null,
                 dialectModulePath: null,
                 host: 'db_test.sqlite',
                 protocol: 'tcp',
                 define: {},
                 query: {},
                 sync: {},
                 timezone: '+00:00',
                 clientMinMessages: 'warning',
                 standardConformingStrings: true,
                 logging: [Function: logging],
                 omitNull: false,
                 native: false,
                 replication: false,
                 ssl: undefined,
                 pool: {},
                 quoteIdentifiers: true,
                 hooks: {},
                 retry: [Object],
                 transactionType: 'IMMEDIATE',
                 isolationLevel: null,
                 databaseVersion: 0,
                 typeValidation: false,
                 benchmark: false,
                 minifyAliases: false,
                 logQueryParameters: false,
                 models: [Array],
                 modelMatch: [Function: modelMatch],
                 dialectOptions: [Object: null prototype] {} },
              dialect: 'sqlite',
              _dialect:
               SqliteDialect {
                 sequelize: [Circular],
                 connectionManager: [ConnectionManager],
                 QueryGenerator: [Circular] },
              OperatorMap:
               { [Symbol(eq)]: '=',
                 [Symbol(ne)]: '!=',
                 [Symbol(gte)]: '>=',
                 [Symbol(gt)]: '>',
                 [Symbol(lte)]: '<=',
                 [Symbol(lt)]: '<',
                 [Symbol(not)]: 'IS NOT',
                 [Symbol(is)]: 'IS',
                 [Symbol(in)]: 'IN',
                 [Symbol(notIn)]: 'NOT IN',
                 [Symbol(like)]: 'LIKE',
                 [Symbol(notLike)]: 'NOT LIKE',
                 [Symbol(iLike)]: 'ILIKE',
                 [Symbol(notILike)]: 'NOT ILIKE',
                 [Symbol(startsWith)]: 'LIKE',
                 [Symbol(endsWith)]: 'LIKE',
                 [Symbol(substring)]: 'LIKE',
                 [Symbol(regexp)]: 'REGEXP',
                 [Symbol(notRegexp)]: 'NOT REGEXP',
                 [Symbol(iRegexp)]: '~*',
                 [Symbol(notIRegexp)]: '!~*',
                 [Symbol(between)]: 'BETWEEN',
                 [Symbol(notBetween)]: 'NOT BETWEEN',
                 [Symbol(overlap)]: '&&',
                 [Symbol(contains)]: '@>',
                 [Symbol(contained)]: '<@',
                 [Symbol(adjacent)]: '-|-',
                 [Symbol(strictLeft)]: '<<',
                 [Symbol(strictRight)]: '>>',
                 [Symbol(noExtendRight)]: '&<',
                 [Symbol(noExtendLeft)]: '&>',
                 [Symbol(any)]: 'ANY',
                 [Symbol(all)]: 'ALL',
                 [Symbol(and)]: ' AND ',
                 [Symbol(or)]: ' OR ',
                 [Symbol(col)]: 'COL',
                 [Symbol(placeholder)]: '$$PLACEHOLDER$$' },
              typeValidation: undefined } },
        models:
         { Event: Event,
           Rate: Rate,
           DomainOffer: DomainOffer,
           Domain: Domain,
           DomainExpiration: DomainExpiration,
           DomainOwner: DomainOwner,
           SoldDomain: SoldDomain,
           Transfer: Transfer,
           Agreement: Agreement,
           BillingPlan: BillingPlan,
           Offer: Offer,
           StakeModel: StakeModel },
        modelManager:
         ModelManager {
           models:
            [ Event,
              Rate,
              DomainOffer,
              Domain,
              DomainExpiration,
              DomainOwner,
              SoldDomain,
              Transfer,
              Agreement,
              BillingPlan,
              Offer,
              StakeModel ],
           sequelize: [Circular] },
        connectionManager:
         ConnectionManager {
           sequelize: [Circular],
           config:
            { database: undefined,
              username: undefined,
              password: null,
              host: 'db_test.sqlite',
              port: undefined,
              pool:
               { max: 5,
                 min: 0,
                 idle: 10000,
                 acquire: 60000,
                 evict: 1000,
                 validate: [Function: bound _validate] },
              protocol: 'tcp',
              native: false,
              ssl: undefined,
              replication: false,
              dialectModule: null,
              dialectModulePath: null,
              keepDefaultTimezone: undefined,
              dialectOptions: {} },
           dialect:
            SqliteDialect {
              sequelize: [Circular],
              connectionManager: [Circular],
              QueryGenerator:
               SQLiteQueryGenerator {
                 sequelize: [Circular],
                 options: [Object],
                 dialect: 'sqlite',
                 _dialect: [Circular],
                 OperatorMap: [Object],
                 typeValidation: undefined } },
           versionPromise: null,
           dialectName: 'sqlite',
           pool:
            Pool {
              _factory:
               { name: 'sequelize',
                 create: [Function: create],
                 destroy: [Function: destroy],
                 validate: [Function: bound _validate],
                 max: 5,
                 min: 0,
                 acquireTimeoutMillis: 60000,
                 idleTimeoutMillis: 10000,
                 reapIntervalMillis: 1000,
                 reapInterval: 1000,
                 log: false },
              _count: 0,
              _draining: false,
              _pendingAcquires: [],
              _inUseObjects: [],
              _availableObjects: [],
              _removeIdleTimer: null,
              _removeIdleScheduled: false },
           connections: { default: Database {} },
           lib:
            { Database: [Function: Database],
              Statement: [Function: Statement],
              Backup: [Function: Backup],
              OPEN_READONLY: 1,
              OPEN_READWRITE: 2,
              OPEN_CREATE: 4,
              OPEN_FULLMUTEX: 65536,
              OPEN_URI: 64,
              OPEN_SHAREDCACHE: 131072,
              OPEN_PRIVATECACHE: 262144,
              VERSION: '3.31.1',
              SOURCE_ID:
               '2020-01-27 19:55:54 3bfa9cc97da10598521b342961df8f5f68c7388fa117345eeb516eaa837bb4d6',
              VERSION_NUMBER: 3031001,
              OK: 0,
              ERROR: 1,
              INTERNAL: 2,
              PERM: 3,
              ABORT: 4,
              BUSY: 5,
              LOCKED: 6,
              NOMEM: 7,
              READONLY: 8,
              INTERRUPT: 9,
              IOERR: 10,
              CORRUPT: 11,
              NOTFOUND: 12,
              FULL: 13,
              CANTOPEN: 14,
              PROTOCOL: 15,
              EMPTY: 16,
              SCHEMA: 17,
              TOOBIG: 18,
              CONSTRAINT: 19,
              MISMATCH: 20,
              MISUSE: 21,
              NOLFS: 22,
              AUTH: 23,
              FORMAT: 24,
              RANGE: 25,
              NOTADB: 26,
              cached: { Database: [Function: Database], objects: {} },
              verbose: [Function] } },
        importCache: {},
        repositoryMode: false },
     hooks: {} },
  _options:
   { isNewRecord: true,
     _schema: null,
     _schemaDelimiter: '',
     attributes: undefined,
     include: undefined,
     raw: undefined,
     silent: undefined },
  isNewRecord: false }
[INFO] 08/09 12:53:21 (storage:handler:stake): Created stake: 
{ total: BigNumber { s: 1, e: 0, c: [ 0 ] },
  id: 1,
  account: 'TestAddress',
  token: 'SomeTokenAddress',
  updatedAt: 2020-09-08T09:53:21.510Z,
  createdAt: 2020-09-08T09:53:21.510Z }
[INFO] 08/09 12:54:12 (storage:handler:stake): Created stake: 
{ total: BigNumber { s: 1, e: 0, c: [ 0 ] },
  id: 1,
  account: 'TestAddress',
  token: 'SomeTokenAddress',
  updatedAt: 2020-09-08T09:54:12.185Z,
  createdAt: 2020-09-08T09:54:12.185Z }
[INFO] 08/09 12:54:12 (storage:handler:stake): Account TestAddress stake amount undefined, final balance 1000
[INFO] 08/09 12:55:09 (storage:handler:stake): Created stake: 
{ total: BigNumber { s: 1, e: 0, c: [ 0 ] },
  id: 1,
  account: 'TestAddress',
  token: 'SomeTokenAddress',
  updatedAt: 2020-09-08T09:55:09.912Z,
  createdAt: 2020-09-08T09:55:09.912Z }
[INFO] 08/09 12:55:09 (storage:handler:stake): Account TestAddress stake amount undefined, final balance 1000
[INFO] 08/09 12:57:07 (storage:handler:stake): Created stake: 
{ total: BigNumber { s: 1, e: 0, c: [ 0 ] },
  id: 1,
  account: 'TestAddress',
  token: 'SomeTokenAddress',
  updatedAt: 2020-09-08T09:57:07.863Z,
  createdAt: 2020-09-08T09:57:07.863Z }
[INFO] 08/09 12:57:07 (storage:handler:stake): Account TestAddress stake amount undefined, final balance 1000
[INFO] 08/09 12:58:22 (storage:handler:stake): Account TestAddress stake amount 1000, final balance 1000
[INFO] 08/09 01:01:24 (storage:handler:stake): Account TestAddress stake amount 1000, final balance 1000
[INFO] 08/09 01:01:24 (storage:handler:stake): Account TestAddress stake amount 1000, final balance 1000
[INFO] 08/09 01:02:22 (storage:handler:stake): Account TestAddress stake amount 1000, final balance 1000
[INFO] 08/09 01:02:56 (storage:handler:stake): Account TestAddress stake amount 1000, final balance 1000
[INFO] 08/09 01:03:48 (storage:handler:stake): Account TestAddress stake amount 1000, final balance 1000
[INFO] 08/09 01:04:44 (storage:handler:stake): Account TestAddress stake amount 1000, final balance 1000
[INFO] 08/09 01:05:02 (storage:handler:stake): Account TestAddress stake amount 1000, final balance 1000
[INFO] 08/09 01:05:02 (storage:handler:stake): Account TestAddress stake amount 1000, final balance 1000
[INFO] 08/09 01:12:04 (storage:handler:stake): Account TestAddress stake amount 1000, final balance 1000
[INFO] 08/09 01:12:05 (storage:handler:stake): Account TestAddress stake amount 1000, final balance 1000
[INFO] 08/09 01:15:17 (storage:handler:stake): Account TestAddress stake amount undefined, final balance 1000
[INFO] 08/09 01:15:37 (storage:handler:stake): Account TestAddress stake amount 1000, final balance 1000
[INFO] 08/09 01:15:37 (storage:handler:stake): Account TestAddress stake amount 1000, final balance 1000
[INFO] 08/09 01:15:37 (storage:handler:stake): Account TestAddress stake amount undefined, final balance 1000
[INFO] 08/09 01:15:37 (storage:handler:stake): Account TestAddress stake amount undefined, final balance 1000
[INFO] 08/09 02:12:44 (blockchain:confirmator): Confirmed 2 events.
[INFO] 08/09 02:12:44 (blockchain:confirmator): Confirmed 2 events.
[INFO] 08/09 02:12:44 (blockchain:confirmator): Confirmed 1 events.
[INFO] 08/09 02:12:44 (blockchain:confirmator): Confirmed 0 events.
[WARN] 08/09 02:12:44 (blockchain:confirmator): Event niceEvent of transaction 3 does not have valid receipt!
      Block numbers: 9 (event) vs 10 (receipt) and receipt status: true 
[WARN] 08/09 02:12:44 (blockchain:confirmator): Event otherEvent of transaction 4 does not have valid receipt!
      Block numbers: 9 (event) vs 9 (receipt) and receipt status: false 
[INFO] 08/09 02:12:44 (blockchain:confirmator): Confirmed 1 events.
[INFO] 08/09 02:12:45 (blockchain:events:dummy): Listener attached, starting processing events.
[INFO] 08/09 02:12:45 (blockchain:events:dummy): => Processing past events from genesis to 11
[INFO] 08/09 02:12:45 (blockchain:events:dummy): => Finished processing past events in 0s
[INFO] 08/09 02:12:45 (blockchain:events:dummy): Listener attached, starting processing events.
[INFO] 08/09 02:12:45 (blockchain:events:dummy): => Processing past events from genesis to 10
[INFO] 08/09 02:12:45 (blockchain:events:dummy): 2 events to be confirmed.
[INFO] 08/09 02:12:45 (blockchain:events:dummy): 2 events to be emitted.
[INFO] 08/09 02:12:45 (blockchain:events:dummy): => Finished processing past events in 0s
[INFO] 08/09 02:12:45 (blockchain:events:dummy): Listener attached, starting processing events.
[INFO] 08/09 02:12:45 (blockchain:events:dummy): 2 events to be confirmed.
[INFO] 08/09 02:12:45 (blockchain:events:dummy): 2 events to be emitted.
[INFO] 08/09 02:12:45 (blockchain:events:dummy): Listener attached, starting processing events.
[INFO] 08/09 02:12:45 (blockchain:events:dummy): => Processing past events from genesis to 10
[INFO] 08/09 02:12:45 (blockchain:events:dummy): => Finished processing past events in 0s
[INFO] 08/09 02:12:45 (blockchain:events:dummy): Listener attached, starting processing events.
[INFO] 08/09 02:12:46 (blockchain:events:polling): Listener attached, starting processing events.
[INFO] 08/09 02:12:46 (blockchain:events:polling): Checking new events between blocks 10-[Function: SubstituteJS] -> number
[INFO] 08/09 02:12:46 (blockchain:events:polling): Checking new events between blocks 11-[Function: SubstituteJS] -> number
[INFO] 08/09 02:12:46 (blockchain:events:polling): Listener attached, starting processing events.
[INFO] 08/09 02:12:46 (blockchain:events:polling): Checking new events between blocks 10-[Function: SubstituteJS] -> number
[INFO] 08/09 02:12:46 (blockchain:events:polling): Checking new events between blocks 11-[Function: SubstituteJS] -> number
[INFO] 08/09 02:12:46 (blockchain:events:polling): No events to be processed.
[INFO] 08/09 02:12:46 (blockchain:events:polling): Listener attached, starting processing events.
[INFO] 08/09 02:12:46 (blockchain:events:polling): Checking new events between blocks 10-[Function: SubstituteJS] -> number
[INFO] 08/09 02:12:46 (blockchain:events:polling): Listener attached, starting processing events.
[INFO] 08/09 02:12:46 (blockchain:events:polling): => Processing past events from genesis to [Function: SubstituteJS] -> hash
[INFO] 08/09 02:12:47 (blockchain:events:polling): => Finished processing past events in 0s
[INFO] 08/09 02:12:47 (blockchain:events:polling): Checking new events between blocks [Function: SubstituteJS] -> number-[Function: SubstituteJS] -> number
[INFO] 08/09 02:12:47 (blockchain:events:polling): Listener attached, starting processing events.
[WARN] 08/09 02:12:47 (blockchain:events:polling): Reorg happening! Old hash: 0x123; New hash: 0x321
[INFO] 08/09 02:12:47 (blockchain:events:polling): 1 events to be confirmed.
[INFO] 08/09 02:12:47 (blockchain:events:polling): 0 events to be emitted.
[INFO] 08/09 02:12:47 (blockchain:events:polling): Listener attached, starting processing events.
[WARN] 08/09 02:12:47 (blockchain:events:polling): Reorg happening! Old hash: 0x123; New hash: 0x321
[INFO] 08/09 02:12:47 (blockchain:events:polling): 1 events to be confirmed.
[INFO] 08/09 02:12:47 (blockchain:events:polling): 0 events to be emitted.
[INFO] 08/09 02:12:48 (blockchain:events:polling): Listener attached, starting processing events.
[WARN] 08/09 02:12:48 (blockchain:events:polling): Reorg happening! Old hash: 0x123; New hash: 0x321
[ERROR] 08/09 02:12:48 (blockchain:events:polling): Reorg out of confirmation range! Old hash: 0x222; New hash: 0x33
[INFO] 08/09 02:12:48 (blockchain:events:polling): 1 events to be confirmed.
[INFO] 08/09 02:12:48 (blockchain:events:polling): 0 events to be emitted.
[INFO] 08/09 02:12:48 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[INFO] 08/09 02:12:48 (blockchain:block-emitter:polling): Listener removing, stopping processing events.
[INFO] 08/09 02:12:48 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[INFO] 08/09 02:12:48 (blockchain:block-emitter:polling): Listener removing, stopping processing events.
[INFO] 08/09 02:12:48 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[INFO] 08/09 02:12:48 (blockchain:block-emitter:polling): Listener removing, stopping processing events.
[INFO] 08/09 02:12:48 (blockchain:block-emitter:listening): Listener attached, starting processing events.
[INFO] 08/09 02:12:48 (blockchain:block-emitter:listening): Listener attached, starting processing events.
[INFO] 08/09 02:12:50 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[WARN] 08/09 02:12:52 (cli:start): Reorg detected outside of confirmation range. Rebuilding the service's state!
[INFO] 08/09 02:12:52 (cli:start): Stopping the app
[INFO] 08/09 02:12:52 (rates:updater): Updating rates using coingecko provider.
[INFO] 08/09 02:12:52 (cli:start): Restarting the app
[INFO] 08/09 02:12:56 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[INFO] 08/09 02:12:56 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[INFO] 08/09 02:12:57 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[INFO] 08/09 02:12:57 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[INFO] 08/09 02:12:58 (storage:handler:offer): Created new StorageOffer for TestAddress
[INFO] 08/09 02:12:58 (storage:handler:offer): Updating capacity 1000 (ID: test)
[INFO] 08/09 02:12:58 (storage:handler:offer): Created new StorageOffer for TestAddress
[INFO] 08/09 02:12:58 (storage:handler:offer): Updating capacity 1000 (ID: TestAddress)
[INFO] 08/09 02:12:59 (storage:handler:offer): Created new StorageOffer for TestAddress
[INFO] 08/09 02:12:59 (storage:handler:offer): Updating period 69696 to price 1000 (ID: TestAddress)
[INFO] 08/09 02:12:59 (storage:handler:offer): Created new StorageOffer for TestAddress
[INFO] 08/09 02:12:59 (storage:handler:offer): Updating period 99 to price 1000 (ID: TestAddress)
[INFO] 08/09 02:12:59 (storage:handler:offer): Updating period 99 to price 99999 (ID: TestAddress)
[INFO] 08/09 02:12:59 (storage:handler:offer): Created new StorageOffer for TestAddress
[INFO] 08/09 02:12:59 (storage:handler:offer): Created new StorageOffer for TestAddress
[INFO] 08/09 02:12:59 (storage:handler:offer): Created new StorageOffer for TestAddress
[INFO] 08/09 02:12:59 (storage:handler:offer): PeerId FakePeerId defined (ID: TestAddress)
[INFO] 08/09 02:12:59 (storage:handler:request): Created new Agreement with ID 0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2 for offer TestAddress
[INFO] 08/09 02:12:59 (storage:handler:request): Agreement 0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2 was stopped.
[INFO] 08/09 02:12:59 (storage:handler:request): Agreement 0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2 was topped up with 50.
[INFO] 08/09 02:12:59 (storage:handler:request): 50 was withdrawn from funds of Agreement 0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2.
[INFO] 08/09 02:13:00 (storage:handler:request): 50 was payed out from funds of Agreement 0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2.
[INFO] 08/09 02:13:00 (storage:handler:stake): Account TestAddress stake amount 1000, final balance 1000
[INFO] 08/09 02:13:00 (storage:handler:stake): Account TestAddress stake amount 1000, final balance 1000
[INFO] 08/09 02:13:00 (storage:handler:stake): Account TestAddress stake amount undefined, final balance 1000
[INFO] 08/09 02:13:00 (storage:handler:stake): Account TestAddress stake amount undefined, final balance 1000
[INFO] 08/09 02:14:42 (blockchain:confirmator): Confirmed 2 events.
[INFO] 08/09 02:14:42 (blockchain:confirmator): Confirmed 2 events.
[INFO] 08/09 02:14:42 (blockchain:confirmator): Confirmed 1 events.
[INFO] 08/09 02:14:43 (blockchain:confirmator): Confirmed 0 events.
[WARN] 08/09 02:14:43 (blockchain:confirmator): Event niceEvent of transaction 3 does not have valid receipt!
      Block numbers: 9 (event) vs 10 (receipt) and receipt status: true 
[WARN] 08/09 02:14:43 (blockchain:confirmator): Event otherEvent of transaction 4 does not have valid receipt!
      Block numbers: 9 (event) vs 9 (receipt) and receipt status: false 
[INFO] 08/09 02:14:43 (blockchain:confirmator): Confirmed 1 events.
[INFO] 08/09 02:14:43 (blockchain:events:dummy): Listener attached, starting processing events.
[INFO] 08/09 02:14:43 (blockchain:events:dummy): => Processing past events from genesis to 11
[INFO] 08/09 02:14:43 (blockchain:events:dummy): => Finished processing past events in 0s
[INFO] 08/09 02:14:43 (blockchain:events:dummy): Listener attached, starting processing events.
[INFO] 08/09 02:14:43 (blockchain:events:dummy): => Processing past events from genesis to 10
[INFO] 08/09 02:14:43 (blockchain:events:dummy): 2 events to be confirmed.
[INFO] 08/09 02:14:43 (blockchain:events:dummy): 2 events to be emitted.
[INFO] 08/09 02:14:43 (blockchain:events:dummy): => Finished processing past events in 0s
[INFO] 08/09 02:14:43 (blockchain:events:dummy): Listener attached, starting processing events.
[INFO] 08/09 02:14:43 (blockchain:events:dummy): 2 events to be confirmed.
[INFO] 08/09 02:14:43 (blockchain:events:dummy): 2 events to be emitted.
[INFO] 08/09 02:14:43 (blockchain:events:dummy): Listener attached, starting processing events.
[INFO] 08/09 02:14:43 (blockchain:events:dummy): => Processing past events from genesis to 10
[INFO] 08/09 02:14:43 (blockchain:events:dummy): => Finished processing past events in 0s
[INFO] 08/09 02:14:44 (blockchain:events:dummy): Listener attached, starting processing events.
[INFO] 08/09 02:14:44 (blockchain:events:polling): Listener attached, starting processing events.
[INFO] 08/09 02:14:44 (blockchain:events:polling): Checking new events between blocks 10-[Function: SubstituteJS] -> number
[INFO] 08/09 02:14:44 (blockchain:events:polling): Checking new events between blocks 11-[Function: SubstituteJS] -> number
[INFO] 08/09 02:14:44 (blockchain:events:polling): Listener attached, starting processing events.
[INFO] 08/09 02:14:44 (blockchain:events:polling): Checking new events between blocks 10-[Function: SubstituteJS] -> number
[INFO] 08/09 02:14:44 (blockchain:events:polling): Checking new events between blocks 11-[Function: SubstituteJS] -> number
[INFO] 08/09 02:14:44 (blockchain:events:polling): No events to be processed.
[INFO] 08/09 02:14:44 (blockchain:events:polling): Listener attached, starting processing events.
[INFO] 08/09 02:14:44 (blockchain:events:polling): Checking new events between blocks 10-[Function: SubstituteJS] -> number
[INFO] 08/09 02:14:45 (blockchain:events:polling): Listener attached, starting processing events.
[INFO] 08/09 02:14:45 (blockchain:events:polling): => Processing past events from genesis to [Function: SubstituteJS] -> hash
[INFO] 08/09 02:14:45 (blockchain:events:polling): => Finished processing past events in 0s
[INFO] 08/09 02:14:45 (blockchain:events:polling): Checking new events between blocks [Function: SubstituteJS] -> number-[Function: SubstituteJS] -> number
[INFO] 08/09 02:14:45 (blockchain:events:polling): Listener attached, starting processing events.
[WARN] 08/09 02:14:45 (blockchain:events:polling): Reorg happening! Old hash: 0x123; New hash: 0x321
[INFO] 08/09 02:14:45 (blockchain:events:polling): 1 events to be confirmed.
[INFO] 08/09 02:14:45 (blockchain:events:polling): 0 events to be emitted.
[INFO] 08/09 02:14:46 (blockchain:events:polling): Listener attached, starting processing events.
[WARN] 08/09 02:14:46 (blockchain:events:polling): Reorg happening! Old hash: 0x123; New hash: 0x321
[INFO] 08/09 02:14:46 (blockchain:events:polling): 1 events to be confirmed.
[INFO] 08/09 02:14:46 (blockchain:events:polling): 0 events to be emitted.
[INFO] 08/09 02:14:46 (blockchain:events:polling): Listener attached, starting processing events.
[WARN] 08/09 02:14:46 (blockchain:events:polling): Reorg happening! Old hash: 0x123; New hash: 0x321
[ERROR] 08/09 02:14:46 (blockchain:events:polling): Reorg out of confirmation range! Old hash: 0x222; New hash: 0x33
[INFO] 08/09 02:14:46 (blockchain:events:polling): 1 events to be confirmed.
[INFO] 08/09 02:14:46 (blockchain:events:polling): 0 events to be emitted.
[INFO] 08/09 02:14:46 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[INFO] 08/09 02:14:46 (blockchain:block-emitter:polling): Listener removing, stopping processing events.
[INFO] 08/09 02:14:46 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[INFO] 08/09 02:14:46 (blockchain:block-emitter:polling): Listener removing, stopping processing events.
[INFO] 08/09 02:14:46 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[INFO] 08/09 02:14:46 (blockchain:block-emitter:polling): Listener removing, stopping processing events.
[INFO] 08/09 02:14:46 (blockchain:block-emitter:listening): Listener attached, starting processing events.
[INFO] 08/09 02:14:46 (blockchain:block-emitter:listening): Listener attached, starting processing events.
[INFO] 08/09 02:14:48 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[WARN] 08/09 02:14:50 (cli:start): Reorg detected outside of confirmation range. Rebuilding the service's state!
[INFO] 08/09 02:14:50 (cli:start): Stopping the app
[INFO] 08/09 02:14:50 (rates:updater): Updating rates using coingecko provider.
[INFO] 08/09 02:14:50 (cli:start): Restarting the app
[INFO] 08/09 02:14:54 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[INFO] 08/09 02:14:54 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[INFO] 08/09 02:14:55 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[INFO] 08/09 02:14:56 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[INFO] 08/09 02:14:57 (storage:handler:offer): Created new StorageOffer for TestAddress
[INFO] 08/09 02:14:57 (storage:handler:offer): Updating capacity 1000 (ID: test)
[INFO] 08/09 02:14:57 (storage:handler:offer): Created new StorageOffer for TestAddress
[INFO] 08/09 02:14:57 (storage:handler:offer): Updating capacity 1000 (ID: TestAddress)
[INFO] 08/09 02:14:57 (storage:handler:offer): Created new StorageOffer for TestAddress
[INFO] 08/09 02:14:57 (storage:handler:offer): Updating period 69696 to price 1000 (ID: TestAddress)
[INFO] 08/09 02:14:57 (storage:handler:offer): Created new StorageOffer for TestAddress
[INFO] 08/09 02:14:57 (storage:handler:offer): Updating period 99 to price 1000 (ID: TestAddress)
[INFO] 08/09 02:14:57 (storage:handler:offer): Updating period 99 to price 99999 (ID: TestAddress)
[INFO] 08/09 02:14:57 (storage:handler:offer): Created new StorageOffer for TestAddress
[INFO] 08/09 02:14:57 (storage:handler:offer): Created new StorageOffer for TestAddress
[INFO] 08/09 02:14:57 (storage:handler:offer): Created new StorageOffer for TestAddress
[INFO] 08/09 02:14:57 (storage:handler:offer): PeerId FakePeerId defined (ID: TestAddress)
[INFO] 08/09 02:14:58 (storage:handler:request): Created new Agreement with ID 0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2 for offer TestAddress
[INFO] 08/09 02:14:58 (storage:handler:request): Agreement 0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2 was stopped.
[INFO] 08/09 02:14:58 (storage:handler:request): Agreement 0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2 was topped up with 50.
[INFO] 08/09 02:14:58 (storage:handler:request): 50 was withdrawn from funds of Agreement 0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2.
[INFO] 08/09 02:14:58 (storage:handler:request): 50 was payed out from funds of Agreement 0x0c0034f6bb08d1678121b525891bd53513f5bad816979178e1ccfdd627c89ea2.
[INFO] 08/09 02:14:58 (storage:handler:stake): Account TestAddress stake amount 1000, final balance 1000
[INFO] 08/09 02:14:59 (storage:handler:stake): Account TestAddress stake amount 1000, final balance 1000
[INFO] 08/09 02:14:59 (storage:handler:stake): Account TestAddress stake amount undefined, final balance 1000
[INFO] 08/09 02:14:59 (storage:handler:stake): Account TestAddress stake amount undefined, final balance 1000
[INFO] 08/09 02:16:31 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[WARN] 08/09 02:16:33 (cli:start): Reorg detected outside of confirmation range. Rebuilding the service's state!
[INFO] 08/09 02:16:33 (cli:start): Stopping the app
[INFO] 08/09 02:16:33 (rates:updater): Updating rates using coingecko provider.
[INFO] 08/09 02:16:34 (cli:start): Restarting the app
[INFO] 08/09 02:45:31 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[WARN] 08/09 02:45:33 (cli:start): Reorg detected outside of confirmation range. Rebuilding the service's state!
[INFO] 08/09 02:45:33 (cli:start): Stopping the app
[INFO] 08/09 02:45:33 (rates:updater): Updating rates using coingecko provider.
[INFO] 08/09 02:45:34 (cli:start): Restarting the app
[INFO] 08/09 02:47:11 (blockchain:block-emitter:polling): Listener attached, starting processing events.
[WARN] 08/09 02:47:12 (cli:start): Reorg detected outside of confirmation range. Rebuilding the service's state!
[INFO] 08/09 02:47:12 (cli:start): Stopping the app
[INFO] 08/09 02:47:12 (rates:updater): Updating rates using coingecko provider.
[INFO] 08/09 02:47:13 (cli:start): Restarting the app
